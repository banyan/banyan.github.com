<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[banyan.github.com]]></title>
  <link href="http://banyan.github.com/atom.xml" rel="self"/>
  <link href="http://banyan.github.com/"/>
  <updated>2012-10-24T02:16:41+09:00</updated>
  <id>http://banyan.github.com/</id>
  <author>
    <name><![CDATA[banyan.github.com]]></name>
  </author>
  <generator uri="https://github.com/mizzy/stellar/">Stellar</generator>


  <entry>
    <title type="html"><![CDATA[capybara + poltergeist か capybara + capybara-webkit でテストが通らない問題にぶつかった]]></title>
    <link href="http://banyan.github.com/2012/10/24/2" />
    <updated>2012-10-24T02:16:41+09:00</updated>
    <id>http://banyan.github.com/2012/10/24/2</id>
    <content type="html"><![CDATA[
<h3>はじめに</h3>

<p>この情報は 2012-10-24 のものです。これ以降ではこの回避方法より正式に upgrade するだけで問題が解決する可能性がありますのでご確認ください。
現状日本語の情報がなかったので書きました。また正式な対応があり次第 update する予定です。何かありましたら <a href="http://twitter.com/banyan">@banyan</a> まで教えて頂けるとありがたいです。</p>

<h3>現象</h3>

<h4>poltergeist を使っている場合</h4>

<ul>
<li>js =&gt; true にしていると1つ目のテストは通るが js =&gt; true にしている2つ目のテストは落ちる</li>
<li>正確にいうと奇数のテストは通るが、偶数のテストは落ちる</li>
<li>エラー内容は以下のような感じ</li>
</ul>

<p><code>
Failure/Error: visit &quot;/&quot;
    Capybara::Poltergeist::DeadClient:
    The PhantomJS client died while processing {&quot;name&quot;:&quot;visit&quot;,&quot;args&quot;:[&quot;http://127.0.0.1:63091/&quot;]}
{&quot;name&quot;=&gt;&quot;visit&quot;, &quot;args&quot;=&gt;[&quot;http://127.0.0.1:63091/&quot;]}
PhantomJS has crashed. Please read the crash reporting guide at https://code.google.com/p/phantomjs/wiki/CrashReporting and file a bug report at https://code.google.com/p
</code></p>

<ul>
<li>capybara (1.1.2)</li>
<li>poltergeist (1.0.1)</li>
</ul>

<h4>capybara-webkit を使っている場合</h4>

<ul>
<li>はじめに Capybara::Driver::Webkit::WebkitNoResponseError がでて以降は Errno::EPIPE: Broken pipe が出て全て死ぬ</li>
</ul>

<p><code>Capybara::Driver::Webkit::WebkitNoResponseError:
No response received from the server.
</code></p>

<ul>
<li>capybara (1.1.2)</li>
<li>capybara-webkit (0.12.1)</li>
</ul>

<h4>issue とか調べていくと、font-awesome を使っている人が起こっている...（ ﾟдﾟ）</h4>

<ul>
<li><a href="https://github.com/thoughtbot/capybara-webkit/issues/68">https://github.com/thoughtbot/capybara-webkit/issues/68</a></li>
<li><a href="https://github.com/thoughtbot/capybara-webkit/issues/181">https://github.com/thoughtbot/capybara-webkit/issues/181</a></li>
<li><a href="https://github.com/jonleighton/poltergeist/issues/44">https://github.com/jonleighton/poltergeist/issues/44</a></li>
<li>Mac の font が原因? まだ正式に答えは出てなさそう。</li>
</ul>

<h4>テストの時は font-awesome を使わないようにする方法でとりあえず回避した</h4>

<ul>
<li><a href="https://github.com/thoughtbot/capybara-webkit/issues/181#issuecomment-6809202">https://github.com/thoughtbot/capybara-webkit/issues/181#issuecomment-6809202</a></li>
</ul>

<h4>所感</h4>

<ul>
<li>そもそも JS の example が少なかったし導入のタイミングだったので切り分けで時間がかかった。

<ul>
<li>元々通ってたのが gem の update をして気づいたのならすぐ気づけたと思った。</li>
</ul></li>
<li>poltergeist(phantomjs) 諦めて capybara-webkit でも同じように死んだので気づけました。</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[「プログラマのための文字コード技術入門」を読んだ]]></title>
    <link href="http://banyan.github.com/2012/10/24/1" />
    <updated>2012-10-24T01:43:42+09:00</updated>
    <id>http://banyan.github.com/2012/10/24/1</id>
    <content type="html"><![CDATA[
<p>もう2年前に出版された本だけどずっと気になってたので買って読んでみた。すばらしく良書でかつ面白かった。文字コードの大きな流れが見えて理解しやすかった。</p>

<p>長年ちゃんと理解してなかったことが書いてあったりすると喜びは格別なのだけど、
もっと早く知っておけばよかったとも、やきもきしながら読んでた。</p>

<p>全部理解できてるわけではないし、そして正直読んだ端から頭から抜けていくので以下気になったところの一部をメモしておく。</p>

<h3>第1章 文字とコンピュータ</h3>

<ul>
<li>事物を符号で表現することを「符号化」と呼ぶ</li>
<li>文字とそれに対応するビット組み合わせを対応付ける規則を「文字コード」と呼ぶ</li>
<li>文字コードを初期に設計した人は世界中の文字を符号化することは考えずに自国の自分たちの用に足るだけの文字を扱うことを考えた</li>
<li>文字を重複なく集めたものを「文字集合」と呼ぶ

<ul>
<li>ラテンアルファベットの大文字・小文字</li>
<li>常用漢字の1945文字</li>
</ul></li>
<li>文字コードを決める際には、文字集合を定めることが必須</li>
<li>文字集合を定義し、その集合の各文字に対応するビット組み合わせを「文字コード」もしくは「符号化文字集合」(coded character set) と呼ぶ

<ul>
<li>実用的な符号化文字集合の例 - ISO/IEC 646 国際基準 (ASCII と同様)</li>
</ul></li>
<li>文字表の中の位置のことを「符号位置」(code position) と呼ぶ</li>
<li>文字は一意に符号化されることが文字コードの原則</li>
<li>文字コードが複雑になる2つの理由

<ul>
<li>過去の資産との互換性や連続性を考慮する必要がある</li>
<li>文字そのものの難しさ</li>
</ul></li>
</ul>

<h3>第2章 文字コードの変遷</h3>

<ul>
<li>最も基本的な文字コード

<ul>
<li>1960 年代にアメリカの規格として開発された <a href="http://ja.wikipedia.org/wiki/ASCII">ASCII</a> (American Standard Code for Information Interchange)</li>
<li>7ビットの1バイトコード</li>
<li>全部で128の符号位置</li>
<li>0x00 から 0x1F までの位置は制御文字に割り当てる</li>
<li>ASCII はアメリカで開発されたので通貨記号として＄ (ドル記号) を含む</li>
</ul></li>
<li>ASCII の各国用の変種

<ul>
<li>各国語版の ISO/IEC 646 が作られることになる</li>
<li>日本版の ISO/IEC 646 -&gt; 日本工業規格の <a href="http://ja.wikipedia.org/wiki/JIS_X_0201">JIS X 0201</a> として標準化</li>
<li>符号位置 0x5C: ASCII では \ (バックスラッシュ) なのが ￥ (通貨の円記号に)</li>
<li>符号位置 0x7E: ASCII では ~ (チルダ) なのが、¯ (オーバーライン)に</li>
<li>ISO/IEC 646 には国際基準版 (International Reference Version) というどこの国でもないバージョンができたが、現在では ASCII と同じものになっている</li>
<li>ISO/IEC 646 の問題 -&gt; 複数の言語を混在化させることができなかった</li>
</ul></li>
<li>文字コードを拡張するための枠組みとして <a href="http://ja.wikipedia.org/wiki/ISO/IEC_2022">ISO/IEC 2022</a> が登場

<ul>
<li>8ビットコード (第8ビットも用いる文字コード) や2バイトコード (2つのバイトで1文字を表す文字コード) が可能</li>
<li>複数の符号化文字集合を組み合わせて用いることができるように</li>
<li>CL/GL, CR/GR</li>
<li>文字集合の切り替えのためにエスケープシーケンスを利用する</li>
<li>ISO/IEC 2022 = エスケープシーケンスではない。(EUC-JP はエスケープシーケンスを使ってない）</li>
</ul></li>
<li>ISO/IEC 2022 に則った2バイト符号化文字集合 -&gt; 1978年に制定された日本の JIS X 0208

<ul>
<li>94 * 94 = 8836 の符号位置がある</li>
<li>ちなみに常用漢字が 1945 文字</li>
<li>漢字だけでなく、平仮名、片仮名、ラテン文字、ギリシャ文字、キリル文字など様々な文字を含む</li>
<li>1バイトコードに2バイトコードを組み合わせたい</li>
<li>JIS X 0208 を ASCII や JIS X 0201 といった1バイトコードと組み合わせて運用する方法が普及 -&gt; Shift_JIS や EUC-JP、ISO-2022-JP はそうした符号化方式</li>
</ul></li>
<li>ヨーロッパでは8ビットの1バイトコードが広く使用され代表格が ISO/IEC 8859-1。通称 Latin-1</li>
<li>国際符号化文字集合

<ul>
<li>世界中の文字をひとつの表に収める</li>
<li>ISO/IEC 10646 と Unicode の誕生</li>
<li>ISO/IEC 10646 と Unicode は別個の規格でありながら、どちらかに文字が追加されればまた一方にも追加され、互いに同一の文字表として改訂されている</li>
</ul></li>
</ul>

<h3>第3章 代表的な符号化文字集合</h3>

<ul>
<li>ASCII と ISO/IEC 646

<ul>
<li>最も基本的な1バイト文字集合</li>
</ul></li>
<li>JIS X 0201

<ul>
<li>ラテン文字と片仮名の1バイト文字集合</li>
</ul></li>
<li>JIS X 0208

<ul>
<li>日本の最も基本的な2バイト文字集合</li>
<li>97 JIS 包摂基準。この概念はとても重要。</li>
</ul></li>
<li>JIS X 0212

<ul>
<li>補助漢字。あまり使われてない。</li>
</ul></li>
<li>JIS X 0213

<ul>
<li>第3、第4水準漢字への拡張</li>
<li>アイヌ語表記用片仮名</li>
<li>賈詡 (かく)、荀彧 (じゅんいく)、龐統 (ほうとう)、許褚 (きょちょ) といった三国志の登場人物は第3、第4水準漢字</li>
</ul></li>
<li>ISO/IEC 8859 シリーズ

<ul>
<li>欧米で広く使われる1バイト符号化文字集合</li>
</ul></li>
<li>Unicode と ISO/IEC 10646

<ul>
<li>国際符号化文字集合</li>
<li>Universal Multiple Octet Coded Character Set (UCS) = ISO/IEC 10646 = Unicode</li>
<li>基本多言語面 (BMP)</li>
<li>Unicode は整数値で表される符号位置と文字とを対応付ける</li>
<li>その整数である符号位置をバイト列の形で表現するための方式として UTF-8 や UTF-16, UTF-32 といった各種の符号化方式が定められている</li>
</ul></li>
</ul>

<h3>第4章 代表的な文字符号化方式</h3>

<ul>
<li>後で書く</li>
</ul>

<h3>第5章 文字コードの変換と判別</h3>

<ul>
<li>後で書(ry</li>
</ul>

<h3>第6章 インターネットと文字コード</h3>

<ul>
<li>後で(ry</li>
</ul>

<h3>第7章 プログラミング言語と文字コード</h3>

<ul>
<li>Java, Ruby1.8, Ruby1.9 の文字コードの取り扱いを紹介。</li>
</ul>

<h3>第8章 はまりやすい落とし穴とその対処</h3>

<ul>
<li>後(ry</li>
</ul>

<h3>Appendix</h3>

<ul>
<li>北朝鮮で1990年代に作られた文字コード KPS 9566 では、「金日成」「金正日」という人名表記に相当するハングル6文字がこの順番に通常のハングルと独立した区点位置にあって、人名でソートした際必ず最初に現れるらしい。面白い。

<ul>
<li><a href="http://www.itscj.ipsj.or.jp/ISO-IR/202.pdf">http://www.itscj.ipsj.or.jp/ISO-IR/202.pdf</a> どれがそれに該当するのかよく分からない。</li>
</ul></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[I18n.backend.store_translations のメモ]]></title>
    <link href="http://banyan.github.com/2012/08/01/1" />
    <updated>2012-08-01T01:15:08+09:00</updated>
    <id>http://banyan.github.com/2012/08/01/1</id>
    <content type="html"><![CDATA[
<p>今日社内の Crafting Rails Applications 読書会でこういうコードがでてきた。</p>

<pre><code>test &quot;model_name.human uses I18n&quot; do
  begin
    I18n.backend.store_translations :en,
      :activemodel =&gt; { :models =&gt; { :sample_mail =&gt; &quot;My Sample Mail&quot; } }

    assert_equal &quot;My Sample Mail&quot;, model.class.model_name.human
  ensure
    I18n.reload!
  end
end
</code></pre>

<p>I18n.backend.store_translations を使うことで I18n のテストをしたい時にいちいち fixture とか yaml とかで I18n の文言を用意しなくてもテストができるらしい。
アプリケーションではなくライブラリなどで I18n のテストを書くときはこの方法がよさそうです。
begin...ensure で囲んであるのはこのテストが終わったときに、reload して格納したデータをリセットするためとのこと。</p>

<p>で今 <a href="https://github.com/brainspec/enumerize">Enumerize</a> のコード見てたら I18n.backend.store_translations のラッパーを用意していて便利げだった。
テスト書いてて、begin...ensure でごちゃごちゃする時はこういう風に書いたりして
block で渡したりするとキレイになって他でも使えそう。</p>

<pre><code>module MiscHelpers
  def store_translations(locale, translations, &amp;block)
    begin
      I18n.backend.store_translations locale, translations
      yield
    ensure
      I18n.reload!
    end
  end
end

class MiniTest::Spec
  include MiscHelpers
end

it &#39;returns nil as translation when value is nil&#39; do
  store_translations(:en, :enumerize =&gt; {:foo =&gt; {:a =&gt; &#39;a text&#39;}}) do
    klass.enumerize(:foo, :in =&gt; [:a, :b])
    object.foo_text.must_equal nil
  end
end
</code></pre>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[My Chef Solo]]></title>
    <link href="http://banyan.github.com/2012/07/09/1" />
    <updated>2012-07-09T02:04:00+09:00</updated>
    <id>http://banyan.github.com/2012/07/09/1</id>
    <content type="html"><![CDATA[
<p>僕の働いている<a href="http://paperboy.co.jp">会社</a>では、<a href="https://github.com/mizzy">mizzy</a> さんが <a href="https://github.com/mizzy/maglica">Maglica</a> という素晴らしいツール (Maglica の説明の<a href="http://mizzy.org/slides/maglica/">スライド</a>) を作られていて、VM が一瞬で構築できるようになってます。</p>

<p>これは本当に life changing で時間も削減できるし、また VM を作ったり消したりが気軽にできるので開発には本当に便利になりました。</p>

<p>しかしながら、先週チームに Windows を使うデザイナーがアサインしてきて (今までチームには Mac 使いしかいなかった) 、Maglica で VM を作って手作業で Linux の Rails 環境を一緒に構築してたけど、
せっかく VM の箇所が自動化できてるのにこういうことをやっちゃいけないなーと思いました。</p>

<p>ちょうど新卒の教育向けに <a href="https://github.com/hiboma">@hiboma</a> が Chef Solo Tutorial をしていたのもあったし、
僕もそれを見ててちょっと意識が高まったので少しでも自動化してみようと思いちょっとやってました。</p>

<p>Chef Solo 自体はちょうど1年半くらい前にさくらの VPS を構築する時にちょっとだけ触ったことある程度です。
その時の recipe、cookbook を見ると、なんというか色々入りすぎてて、もう使う気もしない感じでした。</p>

<p>ちなみに1年半前よりも GitHub で検索しても情報がすごい増えた気がしました。</p>

<p>ということで新しく作り直して、GitHub にあげてみました。</p>

<p><a href="https://github.com/banyan/chef">https://github.com/banyan/chef</a></p>

<p>こうしたほうがもっと幸せになれるとかあったら教えて頂けるとありがたいです。</p>

<p>サーバはさくらの VPS を契約して放置したままだったので、
それを使いながらと、あと EC2 で一個 VM 作ってそれと同時に試してました。</p>

<p>とりあえずの方針としては</p>

<ul>
<li>必ずいれるソフトウェアのパッケージを管理する

<ul>
<li>なるべくミニマムにする。本当に必要なものだけ。</li>
</ul></li>
<li>package 単位で cookbook を作る</li>
<li>rbenv, ruby-build</li>
<li>ufw, ssh の設定をする</li>
<li>role をいい感じにわける</li>
</ul>

<p>というところでそれくらいまではできた感じです。</p>

<p>これからやることとしては、</p>

<ul>
<li>最初にいれる Ruby + Chef + Git も Capistrano で操作する</li>
<li>Unicorn</li>
<li>Supervisor</li>
<li>Mac (homebrew の管理)</li>
<li>Redhat 系の対応</li>
<li>Chef Solo + Capistrano</li>
<li>Role とかもっといい感じにできそう</li>
</ul>

<p>などがうまくできるようになるといいなと思います。</p>

<p>実際に改めて触ってみるとまだちょっとしかできてないけど、TDD 感覚でサーバを構築できるのは楽しい感じがしますね。</p>

<p>いまいち分かってないことや確信を得れてないことはまだたくさんあるのですが、
とりあえずまず晒しながら update していこうと思います。</p>

<h5>参考</h5>

<ul>
<li><a href="https://github.com/cookbooks">https://github.com/cookbooks</a></li>
<li><a href="http://d.hatena.ne.jp/sfujiwara/20120705/1341477250">chef-solo + capistrano で複数ホストを管理する</a></li>
<li><a href="https://github.com/opscode/cookbooks">https://github.com/opscode/cookbooks</a></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[GitHub の Organization の権限についてのメモ]]></title>
    <link href="http://banyan.github.com/2012/06/23/1" />
    <updated>2012-06-23T10:37:13+09:00</updated>
    <id>http://banyan.github.com/2012/06/23/1</id>
    <content type="html"><![CDATA[
<p>2012-06-23 現在のものなので、
また仕様がすぐに変わるかもしれないですがメモとして書いとく。</p>

<p>(仕様が変わったら更新する予定なのと、間違えてたら教えて頂けるとありがたいです。)</p>

<p>Organization を作ると Team を作ることが可能。
Team には今のところ3つの権限がある。</p>

<ul>
<li>Pull Only</li>
<li>Push &amp; Pull</li>
<li>Push Pull &amp; Administrative</li>
</ul>

<p>この他に実質的な管理者である</p>

<ul>
<li>Owner</li>
</ul>

<p>がある。</p>

<table>
  <tr>
    <th>権限</th>
    <th>issue を作るとメールが飛んでくるか</th>
    <th>Pull Request ができるか</th>
    <th>Organization の設定を管理画面からできるか</th>
  </tr>
  <tr>
    <th>Pull Only</th>
    <td>no</td>
    <td>no</td>
    <td>no</td>
  </tr>
  <tr>
    <th>Push & Pull</th>
    <td>yes</td>
    <td>no</td>
    <td>no</td>
  </tr>
  <tr>
    <th>Push Pull & Administrative</th>
    <td>yes</td>
    <td>yes</td>
    <td>no</td>
  </tr>
  <tr>
    <th>Owner</th>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
</table>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[tutor-for-non-programmer-and-non-designer]]></title>
    <link href="http://banyan.github.com/2012/06/15/1" />
    <updated>2012-06-15T01:12:43+09:00</updated>
    <id>http://banyan.github.com/2012/06/15/1</id>
    <content type="html"><![CDATA[
<p>社内の勉強会のようなもので、Rails 写経会というものがあって、そこでチューター的なことをした。
10人くらいの参加者のうち、8人が Mac、2人が Windows でまず開発環境を作りに取り掛かり、
僕は主に Windows の人と一緒に作業してた。</p>

<p>通常はプログラマやデザイナに何か伝えることはあっても
2人ともプログラマでもなくデザイナでもなかったので、どう伝えようかとか迷った。</p>

<p>気づいたこととして、</p>

<ul>
<li>とにかく typo が多い

<ul>
<li>typo をしない方法を伝えることが重要</li>
<li>なるべくコンソール上の作業では Tab キーを使うようにするとか</li>
<li>コピペを推奨

<ul>
<li>Windows のコマンドプロンプトはコピペも大変だったりする</li>
</ul></li>
<li>bundle と打ってください、と言っても 「bundle」という単語自体に馴染みがないので簡単には打てない</li>
<li>rails でも lails と typo したりする</li>
</ul></li>
</ul>

<p>このあたりの問題にある種新鮮な衝撃を覚えた。</p>

<p>僕自身プログラムを始めた時は、typo に苦しんでた気がする。
本を写経して、ドンとプログラムを実行して、エラーが出る時に、
一文字一文字確認するけど、間違ってないように見える。</p>

<p>間違ってないように見えるけど、それはどこかが間違っていて、
そうして、少しずつプログラムを入力しては実行して、ということを
経験から学んできた気がするけど、それにしても typo が多かったことにびっくりした。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Working with Unix Processes の Daemon Processes を社内勉強会で読んだメモ]]></title>
    <link href="http://banyan.github.com/2012/06/07/2" />
    <updated>2012-06-07T23:00:00+09:00</updated>
    <id>http://banyan.github.com/2012/06/07/2</id>
    <content type="html"><![CDATA[
<p>Working with Unix Processes の Daemon Processes を社内勉強会で読んだ。
以前さらっと読んだ時はふんふん...なるほどーとか読みながら読めたけど
すごい忘れてるし、そもそもじっくり話しながら読んだら自分は全然理解できてないことが分かった。</p>

<p>ので改めて読んでメモしとく。
まだ理解曖昧な部分はアップデートしていきたい</p>

<script src="https://gist.github.com/2889128.js"> </script>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Github の Deploy Keys の公開鍵のメモ]]></title>
    <link href="http://banyan.github.com/2012/06/07/1" />
    <updated>2012-06-07T10:57:00+09:00</updated>
    <id>http://banyan.github.com/2012/06/07/1</id>
    <content type="html"><![CDATA[
<p>Github を会社で使っています。とても快適です。</p>

<p>Github を会社で使えますよー、というのは求人条件とかに書いてもいいと思う。</p>

<p>それはさておき、今は Business Plans の Bronze の Plan を使っています。</p>

<p>Bronze Plan では 10個の Private Repository を作成することができますが、
そのひとつのリポジトリに対して、デプロイキー (公開鍵) を設定することができますが、
Github は公開鍵は全体で一意のものしか登録ができません。</p>

<p>したがって、リポジトリAを例えば CI サーバから取得するみたいな時に、
CI サーバの鍵を登録してしまうと、リポジトリBには同じ鍵を登録することができません。</p>

<p>もっといい方法があるかもしれませんが、今はデプロイだけをするユーザを新規作成して、
そのユーザを organization に追加して (Pull Only の権限)、そのユーザ自身の公開鍵を普通に SSH Keys から設定しておくことでこの問題を回避しています。
(秘密鍵を新しく作るサーバに配置する必要はあります)</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[pow + tunnels + launchd]]></title>
    <link href="http://banyan.github.com/2012/04/19/2" />
    <updated>2012-04-19T18:47:00+09:00</updated>
    <id>http://banyan.github.com/2012/04/19/2</id>
    <content type="html"><![CDATA[
<p><a href="https://github.com/jugyo/tunnels">tunnels</a> is awesome which enables us runnning pow over SSL.</p>

<pre><code>$ gem install tunnels
$ sudo tunnels (just to use)
</code></pre>

<p>And it&#39;s better to work in the background by launchd.</p>

<pre><code>$ sudo vi /Library/LaunchDaemons/org.rubygems.tunnels.plist
</code></pre>

<script src="https://gist.github.com/2420053.js"> </script>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[はてなスターを導入した]]></title>
    <link href="http://banyan.github.com/2012/04/19/1" />
    <updated>2012-04-19T02:19:00+09:00</updated>
    <id>http://banyan.github.com/2012/04/19/1</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>


</feed>

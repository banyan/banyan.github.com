<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@banyan's blog]]></title>
  <link href="http://banyan.me/atom.xml" rel="self"/>
  <link href="http://banyan.me/"/>
  <updated>2019-06-28T01:23:06+09:00</updated>
  <id>http://banyan.me/</id>
  <author>
    <name><![CDATA[@banyan's blog]]></name>
  </author>
  <generator uri="https://github.com/mizzy/nebel/">nebel</generator>


  <entry>
    <title type="html"><![CDATA[service worker + webview + chrome 75 でハマった]]></title>
    <link href="http://banyan.me/2019/06/28/1" />
    <updated>2019-06-28T01:23:06+09:00</updated>
    <id>http://banyan.me/2019/06/28/1</id>
    <content type="html"><![CDATA[
<p>作っているアプリケーションで2019年の5月末から Android での webview で画面が真っ白になってしまうクレームが少しずつ入り始めた。
(一部のページだけを webview で表示している)</p>

<p>真っ白になってしまう、ということは心当たりはあった。</p>

<p>今作っている SPA では S3 でホストしていなくて、Kubernates 上の nginx で静的なファイルをホストしている。(その前に CDN もいる。) そのため、デプロイの度に js やら css やらのファイルは消滅してしまう形になる。CDN の cache があるため、ファイルがなくなっても即座に 404 を返さないが、はじめに話を聞いた時は恐らく特定の android 端末で index.html を cache してしまって存在しないファイルを load しようとして 404 が返ってきてしまって真っ白な画面が表示されていると思った。</p>

<p>が、違った。たまたま社内の android 端末で再現できて、<code>An unknown error occurred when fetching the script</code> というエラーを吐いて service worker が pending の状態で止まっていた。precache しようとしてファイルは全て cancelled という状態になっていた。</p>

<p>webview のバージョンが 75.0.3770.101 でほぼ最新ということから、bugs.chromium.org を探すと完全に同じ内容のバグ報告が見つかった。
<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=977784">https://bugs.chromium.org/p/chromium/issues/detail?id=977784</a></p>

<p>同僚の Android エンジニアと相談して対応方法を検討して webview を Chrome Custom tab に切り替える方法を検討したが、諸事情あり一旦はこの webview として読み込まれた場合は service worker を起動させないように変更した。</p>

<pre><code>export default function register() {
  if (process.env.NODE_ENV === &#39;production&#39; &amp;&amp; &#39;serviceWorker&#39; in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(
      process.env.PUBLIC_URL!,
      window.location.toString(),
   );

   if (navigator.userAgent.indexOf(&#39;foo&#39;) &gt;= 0) {
      navigator.serviceWorker.getRegistrations().then(registrations =&gt; {
        for (const registration of registrations) {
          registration.unregister().then(() =&gt; {
            window.location.reload();
          });
        }
      });

      return;
    }
...
</code></pre>

<p>service worker は CRA ベースのスクリプトで workbox を使っている。</p>

<p>この webview として表示する時に UA を渡していたため、判別することが可能で、
マッチした時はまず service worker を register しないという処理にした。</p>

<p>で、すでに service worker をインストール済みだった場合に unregister する、という処理をいれた。
これを service worker がまだインストールされていない状態で開くと、service worker は register されないという期待通りの挙動になった。次に service worker がインストールされた状態で開くと正しく unregister が走り、service worker は register されないという期待通りの挙動になった。</p>

<p>で、すでに <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=977784">https://bugs.chromium.org/p/chromium/issues/detail?id=977784</a> の状態になっている人はどうなるか、というと unregister が走る前に <code>An unknown error occurred when fetching the script</code> が出て死んでしまう状態になった。結果アプリのデータを消すか uninstall するかでしか戻らない状態になった。</p>

<p>service worker でそんなに問題が起こったことがなかったのだけど改めて起きると大変だなと学んだ。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Subsonic から Google Play Music に移行する]]></title>
    <link href="http://banyan.me/2016/12/05/1" />
    <updated>2016-12-05T13:39:32+09:00</updated>
    <id>http://banyan.me/2016/12/05/1</id>
    <content type="html"><![CDATA[
<p>長い間 Subsonic を使ってきた。一方で Spotify 等のストリーミング配信サービスもたくさん出てきた。
Spotify をちょっと試してみると悪くなくとりあえず有料ユーザになった。</p>

<p>ずっと Spotify を使い続けるか分からないけれど Spotify を契約すると Subsonic のために借りてる VPS の金額が気になってくる。自前でサーバ立てるしかないか... とか考えてたら Google Play Music に音楽をインポートできるよと同僚に教えてもらう。
とはいえどうせそんなにインポートできないだろう、あと Google Play Music の有料ユーザにならないといけないのでは？とか思ったけど</p>

<p><img src="/images/google-play-music.png" alt=""></p>

<p>全然問題なかった。</p>

<p>Google Play Music 自体が正式に日本でローンチしたのが2015年9月だが無料でインポートできることを全く知らなかった。(あと検索すると日本ローンチ前からもインポートして使ってる人は多そうだった)
とりあえずローカルの PC から音楽を手動でアップロードすると何の問題なくインポートができた。</p>

<p>で VPS からインポートしたい。</p>

<p><a href="https://github.com/simon-weber/gmusicapi">https://github.com/simon-weber/gmusicapi</a> という unofficial なライブラリがあって、更にそれを使った <a href="https://github.com/thebigmunch/gmusicapi-scripts">https://github.com/thebigmunch/gmusicapi-scripts</a> スクリプトのリポジトリがあった。
Python 3.4 以上が必要で以下作業メモ。</p>

<pre><code># m4a を変換するために必要というエラーメッセージが出た
wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz
tar xof ffmpeg-release-64bit-static.tar.xz
cd ffmpeg-release-64bit-static.tar.xz
sudo cp ffmpeg-3.2.1-64bit-static/ffmpeg /usr/local/bin

# Python3 を install してない場合
sudo apt-get update
sudo apt-get install python3.4 # gmusicapi-scripts は Python 3.4 以上が必要らしい
sudo apt install python3-pip

sudo pip3 install gmusicapi-scripts
# https://github.com/simon-weber/gmusicapi/issues/60
gmsync up /path/to/music -U XX:XX:XX:XX:XX:XX
# =&gt; oauth の token を取得する URL が表示されて入力すると upload が開始される
</code></pre>

<p>VPS などから upload する時に MAC Address が取得できない時は最初 random にしていたらしい: <a href="https://github.com/simon-weber/gmusicapi/issues/60">https://github.com/simon-weber/gmusicapi/issues/60</a>
Google Play Music の Settings のページに以下が書いてあり、</p>

<blockquote>
<p>Listen to your music from any computer as well as up to ten devices. Uploading or downloading music using Music Manager or Google Play Music for Chrome counts towards your device limit. You can deauthorize four devices per year.</p>
</blockquote>

<p>random にしているとこの制限にひっかかることから明示的に外から MAC Address を渡せるようにしたようだ。とりあえず自分のローカルの PC の MAC Address を渡すようにした (別のデバイスとしては認識されるが)
あとは nohup で実行して問題なくインポートできてる。時間はそれなりにかかるとは思うが、Subsonic には今までとてもお世話になったので感謝しつつサーバを解約できるので嬉しい。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Can't focus on iframe with IE]]></title>
    <link href="http://banyan.me/2015/01/17/1" />
    <updated>2015-01-17T17:24:06-05:00</updated>
    <id>http://banyan.me/2015/01/17/1</id>
    <content type="html"><![CDATA[
<p>iframe with IE (IE11) でハマった。</p>

<pre><code>var ChatComponent = React.createClass({
  render: function() {
    return (
      &lt;div&gt;
        &lt;input type=&quot;text&quot; /&gt;
      &lt;/div&gt;
    );
  }
});
</code></pre>

<p>という component を iframe 上で表示していて、最初の iframe を生成する時は問題ないが、一度 component を削除して2回目に iframe を生成すると文字が入力できない状態になってしまう (focus されない)</p>

<pre><code>var ChatComponent = React.createClass({
  render: function() {
    return (
      &lt;div&gt;
        &lt;input type=&quot;text&quot; autoFocus /&gt;
      &lt;/div&gt;
    );
  }
});
</code></pre>

<p>autofocus attribute をつけるとうまくいく。2015年でも IE を疑う気持ちを忘れてはいけないことを学んだ。</p>

<p>refs: <a href="http://bugs.jquery.com/ticket/12319">http://bugs.jquery.com/ticket/12319</a></p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[会社の hubot 公開した]]></title>
    <link href="http://banyan.me/2014/07/22/2" />
    <updated>2014-07-22T02:00:47+09:00</updated>
    <id>http://banyan.me/2014/07/22/2</id>
    <content type="html"><![CDATA[
<p>OMG の<a href="http://tech.ohmyglasses.jp/blog/2014/06/20/life-that-there-is-a-hubot/">記事</a>を見ていいなと思って、会社の hubot publicize した。</p>

<p><a href="https://github.com/quipper/quipper-hubot">quipper/quipper-hubot</a></p>

<p>script の数が少ないうちにえいやっと公開するのがよさそう。まだ少なかったのでよかったです。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[フィリピンでエンジニアインターンしてみた]]></title>
    <link href="http://banyan.me/2014/07/22/1" />
    <updated>2014-07-22T01:46:21+09:00</updated>
    <id>http://banyan.me/2014/07/22/1</id>
    <content type="html"><![CDATA[
<h3>経緯</h3>

<ul>
<li>フィリピンに会社の支社ができて、1週間出張に行くことになった。</li>
<li>学校見学したり、ミートアップ的なことをしたりした。このあたりは @kyanny 氏の<a href="http://blog.kyanny.me/entry/2014/07/13/000647">ブログに詳しい</a></li>
<li>ついでに3,4,5月にハードに働いていたため代休が溜まっていたので1週間使って英語の学校で勉強するか、インターンしてみようか、考えてみた。</li>
</ul>

<h3>なぜインターンか</h3>

<ul>
<li>昔 deeeki さんの<a href="http://d.hatena.ne.jp/deeeki/20130628/programmer_intern_philippines">ブログ</a>見てて面白そうだな、と思ってた。</li>
<li>あと、今働いてる会社にビジネス寄りの人でインターンしてる人が多くて、インターンっていうと大学生がやるものみたいな印象もあったけど、そうでもないんだな、と思うようになった。</li>
<li>英語の実践の勉強として</li>
<li>単純に気分転換したかった</li>
<li>フィリピンの Ruby の会社とかどんな感じか見てみたかった</li>
</ul>

<h3>会社探し</h3>

<ul>
<li>とりあえずフィリピン人の同僚にマニラ で Ruby/JS で有名な会社ってどこかな？って聞いてみたら <a href="http://www.proudcloud.net/">Proudcloud</a> って教えてくれた。</li>
<li>1週間だけだけど、インターンとかできますか？ って言って、簡単な自己紹介と GitHub のアカウントつけてメールしてみたら向こうの CEO から翌日返信が来て、「Sure come over! (もちろん、来てください)」と一行のメールが返ってきた。</li>
<li>このカジュアルさに衝撃を受けつつ、まぁ行ってみて拒否られたら、もう旅行とかすればいいや、と思って行ってみることにした</li>
</ul>

<h3>会社に行く</h3>

<ul>
<li>なかなか最初に着くまでが渋滞してたりして大変だった。あと会社も入り口が地味でよく分かんなかった。</li>
<li>受付の人に「あのー今日からインターンの予定の者なんですけど...」って言ってみてもかなり不審がられた (気がする)。 当然のように情報伝わってないっぽかった。</li>
<li>その後 CTO (Jason) が出てきて、なんとかなった。</li>
</ul>

<h3>やったこと</h3>

<ul>
<li>さすがに期間が短いから、ちょっと本体のプロジェクトだと色々説明に時間がかかってしまうから、みたいな感じでなんか社内の遊び (趣味?) プロジェクトに入った。このプロジェクトが何なのかはよく分からなかった。(でもデザイナとか社内のリソースは使ってた)</li>
<li>ビットコイン詳しい？って聞かれて、いやあんまり... というやりとりの後、フィリピンのビットコインの野良 API をまとめて、influxdb にデータをいれて、それを influxdb の Native HTTP API を使って HTML から直接 json を取得するみたいなことをした。</li>
<li>サーバ側は node ですでにちょっと書かれてて、これを Rails にしてもいいけどどうする？みたいな話をしてて、とりあえず node でいいでしょう、となった。</li>
<li>CI は wercker を使ってて、wercker 使ったことなかったけど、influxdb でテスト通すための <a href="https://github.com/banyan/box-influxdb">box</a> とか作ってみた。</li>
<li>クライアント側は慣れてる <a href="http://brunch.io/">brunch</a> を使って別リポジトリにして作った。</li>
<li>一応デザイン以外ひと通り完成した。</li>
<li>2日目で、you should be working here! と褒められた</li>
<li>1日台風でマニラ中が停電になって、出社できなかった。</li>
</ul>

<h3>最後にLTさせてもらう</h3>

<ul>
<li>最後に今回自分が作ったもの、自分の今の会社のこと、自分の会社でこの1年やったことをLTした。</li>
<li>一応みんな dev 以外の人も集まってくれて、聞いてくれてたりした。</li>
<li>自分の今の会社のスライドで We&#39;re hiring! という文があって、一応言っといた。我ながらインターンとしていっておきながら大胆に宣伝するというのはどうかとちょっと思った。Jason は We&#39;re hiring, too って言ってた。</li>
</ul>

<h3>その他</h3>

<ul>
<li>GitHub/HipChat 英語には最近自信がついてきた気がするけど、依然としてリスニング/スピーキングは弱い。特にフィリピン人の発音が聞き取りやすい人となまってる人が顕著な気がする。自分は英語ができない思いをしないとなかなか勉強のモチベーションが続かないタイプ(絶望ドリブン) なのでそういう点ではよかった。</li>
<li>会社の中は窓がなくて電気も暗かった。</li>
<li>モニタとか椅子とかは普通によかった。</li>
<li>フィリピン人歌をかなり本気で口ずさむ人が多かった。鼻歌というより普通に歌ってて、日本だとあの音量で歌う人は見たことない。そしてみんな誰も気にしてなかった。</li>
<li>自分が働いてる会社のフィリピン人の英語はみんな上品な感じだけど、なんか Prowdcloud の人はヒップホップっぽい感じを受けた。</li>
<li>CEO が自分達はとにかくインターンは受け入れたいんだ。国籍がなんであれ、期間がなんであれ、みんな好きに滞在して出て行く、みたいなことを言ってた。梁山泊ぽかった。実際自分がいた時はマーケティング系の黒人系フランス人がいた。</li>
<li>ご飯毎日誘ってもらって食べたりしてた。</li>
<li>Proudcloud は受託がメインの会社だけど、自社 (レベニューシェア的なやつ) でもちょっと最近はやってるらしい。</li>
<li>Prowdcloud は今は Ruby エンジニア15人くらいいる。</li>
<li>何の仕事をやってるの？と聞くと、自分は JavaScript エンジニアだ、と答える人も結構いた。でも最近は JS のプロジェクトはないので Rails をメインでやってると言ってた。</li>
<li>フィリピンでは .NET, Java が仕事では多くて、Ruby の会社は珍しいそう、あと Rails エンジニアはバブってる感じだった。</li>
<li>Jason はビットコインをかなり持ってると言ってた。あと今年の RubyKaigi2014 には行くそうなので、もし行かれる人はぜひ話してあげてください。すごいいい人です。</li>
<li><a href="http://blog.fujimuradaisuke.com/post/39745641588/etsy-twitter">EtsyとTwitterがエンジニア交換プログラムをやっている</a> という話とか、いいなぁとは思うんだけど実際にどこもなかなかできないと思う。インターンとか、もっとカジュアルにできると面白いと思う。当然どう情報の機密性を担保するかという話にはなるけど、そういうのがもっとできるようにしていきたいなぁと受け入れてもらう側になることで思ったりしました。</li>
<li>8月からフィリピンで2ヶ月更に出張の予定なので、フィリピンにはまだ縁がありそうです :)</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Dokku の LT してきた]]></title>
    <link href="http://banyan.me/2014/01/16/1" />
    <updated>2014-01-16T22:38:27+09:00</updated>
    <id>http://banyan.me/2014/01/16/1</id>
    <content type="html"><![CDATA[
<p><a href="http://herokujp.doorkeeper.jp/events/8004">Heroku Meetup #11 New Year Party!!</a> で <a href="https://github.com/progrium/dokku">Dokku</a> の話を LT してきた。</p>

<p><a href="http://banyan.me/slides/20140116/slides.html">Inside Dokku in 5 minutes</a></p>

<p>5分過ぎると5分過ぎてますよーとかドラが鳴るとかはなく、ケーブルを抜いて終わるという strict な感じな LT だった。</p>

<p>5分なので Dokku スライドに書かなかった内容としては、</p>

<ul>
<li>Ubuntu 13.04 で動かす必要がある (Ubuntu 13.10 だと Docker 側にバグがあって docker 0.8.* 系で修正される予定らしい、<a href="https://github.com/dotcloud/docker/issues/1300">これ</a>と<a href="https://github.com/dotcloud/docker/issues/1906">これ</a>)</li>
<li>クリーンインストールを前提としている</li>
<li>サーバのホストネームが名前解決されない時は <code>/home/dokku/VHOST</code> に手動でホスト名を書く必要がある</li>
<li>Docker のバージョンがあがって Docker 側に regression がある時は  <code>DOCKER_VERSION=0.7.5 make install</code> とかして Docker のバージョン固定する (<a href="https://github.com/progrium/dokku/pull/407">PR</a>)</li>
<li><code>/home/dokku/dokkurc</code> に <code>export DOKKU_TRACE=1</code> と書くとログが出るのでデバッグとか流れを追うのに便利</li>
<li><code>dokku run [application name] rake db:migrate</code> とかで migrate は手動で行う必要がある</li>
<li>MySQL plugin とかは前は動いてと思うけど、docker, dokku 共に変更が加えられて動かなくなってる。<a href="https://github.com/banyan/dokku-mysql-plugin">https://github.com/banyan/dokku-mysql-plugin</a> の fork はとりあえず動いてる。PostgreSQL は plugin たくさんある。</li>
<li>これは dokku の問題ではなく docker の問題だけど、status が Ghost の Docker が出てしまうことがあった。<a href="https://github.com/dotcloud/docker/issues/2419">https://github.com/dotcloud/docker/issues/2419</a> docker 側でもよくわかってないらしい。確かに kill とか stop はできなかったけど、docker restart したら自分の場合は普通に直った。</li>
<li>root domain の設定は <a href="https://github.com/progrium/dokku/wiki/Deploying-to-root-and-subdomains">https://github.com/progrium/dokku/wiki/Deploying-to-root-and-subdomains</a> に書いてある</li>
</ul>

<p>Dokku の仕組み面白いと思いました。SSH の本とかもやはり読みたいなーと思った。
あとはプレゼンをもう少しなんとかしたい。同僚の @kyanny はリビングプレゼンテーション Zen という感じなのでもう少し何とか吸収したいなぁ &gt;&lt;</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[jenkins-ci-skip-plugin を書いてみた]]></title>
    <link href="http://banyan.me/2013/12/24/1" />
    <updated>2013-12-24T01:40:37+09:00</updated>
    <id>http://banyan.me/2013/12/24/1</id>
    <content type="html"><![CDATA[
<p><a href="https://github.com/banyan/jenkins-ci-skip-plugin">jenkins-ci-skip-plugin</a></p>

<p><code>[ci skip]</code> という文字列がコミットに含まれているとビルドをスキップするというのが Travis CI にあって、Circle CI も同じ機能がある。</p>

<ul>
<li><a href="http://about.travis-ci.org/docs/user/how-to-skip-a-build/">Travis CI: How to skip a build</a></li>
<li><a href="https://circleci.com/docs/skip-a-build">Skip a build - CircleCI</a></li>
</ul>

<p>Rails とかはたくさんの environment でテストされているのでドキュメントの変更の場合は必ずコミットに含むように書いてある。</p>

<ul>
<li><a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation">http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation</a></li>
</ul>

<p>で、それを Jenkins でも同じようにできるようにするというもの。あんまり必要は感じてなかったんだけど、最近 Docker とか使ってテストするようになって feature branch とかでテストをパスできるんならしたいなと思うことがあったので書いてみました。</p>

<p>Jenkins は Changeset の差分で見るので、もし Changeset の最新のコミットに文字列が含まれていれば NOT BUILT としてスキップされるけど、そのビルドを手動でもう一度ビルドを走らせる時は Changeset がない状態になるのでビルドが走ります。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Git の hook で未来のコミットを書き換える]]></title>
    <link href="http://banyan.me/2013/11/21/1" />
    <updated>2013-11-21T10:47:13+09:00</updated>
    <id>http://banyan.me/2013/11/21/1</id>
    <content type="html"><![CDATA[
<p>最近 Mac で &quot;Set date and time automatically&quot; のチェックを外し、
日付を変えて開発をすることが多いのですが、ありがちなのがそのまま commit してしまうことで、
まだ PR 中に気付ければいいけど、それが merge されてしまって、更にその上に変更をかぶせてしまってたりすると
直すのがなかなか大変でめんどくさい (filter-branch とか使う) ので git の <s>pre-commit でもし日付が変更されている状態なら日付を戻して commit するようにした。</s>
実際は履歴が気持ち悪くなるだけで特に副作用はないけれど。</p>

<pre><code>$ sudo lsof -i:123 -P
</code></pre>

<p>ポートが使われているかどうかは lsof とかで調べればいいけど、チェック自体をコマンドラインからどうやって制御すればいいかなと思ったけど、以下のコマンドがあったことを初めて知った。</p>

<pre><code>$ systemsetup -setusingnetworktime on
</code></pre>

<pre><code>$ git config --global init.templatedir &#39;~/.git_template&#39;
</code></pre>

<p>を実行した後、</p>

<p><a href="https://gist.github.com/banyan/7574810">https://gist.github.com/banyan/7574810</a></p>

<p><s>を ~/.git_template/hooks 以下とかに pre-commit という名前で実行権限つけて保存すればOK。
新規のリポジトリを作る際は hooks 以下に pre-commit というファイルができていれば OK で、既存のリポジトリに適用させる場合は git init で reinitialize すればよかった。</s></p>

<p>当初 pre-commit でできると思ったけど、実際に Mac の時間は戻るけど、git の commit object が先に作られてしまう (もう少し調べる) ため pre-commit の時に時間を戻してもダメだった。
なのであんまりきれいな方法じゃないけど、post-commit で時間を戻した後に commit --amend する方法にした。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Quipper で最初のリリースなので振り返る]]></title>
    <link href="http://banyan.me/2013/10/22/1" />
    <updated>2013-10-22T23:24:04+09:00</updated>
    <id>http://banyan.me/2013/10/22/1</id>
    <content type="html"><![CDATA[
<p>5月に Quipper に入ってやっと最初のリリースが迎えられそうな中、チームのメンバー全員がなぜかブログを書き始めた。なんなのこれ...</p>

<ul>
<li><a href="http://blog.kyanny.me/entry/quipper-sense-of-speed">Quipper のスピード感</a></li>
<li><a href="http://mizchi.hatenablog.com/entry/2013/10/22/124107">自分の強みを生かすこと on Quipper</a></li>
<li><a href="http://hakobera.hatenablog.com/entry/2013/10/22/133014">Github Issues を利用したリリースマネージャのお仕事</a></li>
<li><a href="http://dagezi.hatenablog.com/entry/2013/10/22/135057">Quipperでのおじさんエンジニアの立ち位置</a></li>
<li><a href="http://blog.fujimuradaisuke.com/post/64753754298/quipper-html5">QuipperでHTML5アプリを作ってる話</a></li>
<li><a href="http://mzbqpmb.wordpress.com/2013/10/22/quipper%E3%81%AEhr%E6%B4%BB%E5%8B%95%EF%BC%88%E3%82%B9%E3%83%86%E3%83%9E%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%82%88%EF%BC%89/">Quipperのエンジニアのblog day（ステマじゃないよ）</a></li>
</ul>

<blockquote class="twitter-tweet"><p>でも <a href="https://twitter.com/banyan">@banyan</a> さんが日記書くまでは寝るわけにいかない。</p>&mdash; 北市真 (@KitaitiMakoto) <a href="https://twitter.com/KitaitiMakoto/statuses/392649527267561472">October 22, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>同調圧力は見て見ぬふりをしてたけど、外部のブログ圧力に負け僕も書くことにします。</p>

<h2>Pull Request の粒度</h2>

<p>6月に最初は開発者4人でスタートして、8月に Android 開発者の @dagezi さん、9月に @mizchi さん、で9月途中くらいから @hakobera さんにリリースマネージャとして入ってもらった。
4人メインでいると Pull Request の粒度はどんどん小さいものになっていてちゃんと Pull Request が回るのは4人くらいからなのかなーと思った。レビューしてマージする流れが早ければどんどん粒度も小さくなっていくけど、これが2人しかいないとかだとどうしても Pull Request の粒度も大きいものになってしまってレビューも更に時間がかかる、という感じになる。</p>

<p>ピークの時は小さいものもどんどん送るので月500個くらいチームとして Pull Request 投げてたと思う。リポジトリは結構たくさんあって、client, api, plugins みたいな感じでも別れてるので、<a href="https://github.com/banyan/pending-pr">pending-pr</a> みたいなツール作って朝出社したら Jenkins からリマインドしてもらうようにした。</p>

<h2>Brunch + Chaplin.js よかった</h2>

<p>作ってたのは HTML5 アプリ(HTML + CSS + JavaScript のクライアント) で最初フレームワークとか何を使おうと色々考えたけど、@fujimura さんが brunch + chaplin.js がよさそうということでそれを選択した。
brunch は結局必要になるいろんなものが最初から全部あるので使ってみた感想としてはよかった。特に最初からテストがすぐ動かせるというのは大きいと思う。アプリケーションは S3 + CloudFront で動かしてる。(API は heroku)</p>

<p>とはいえ、完全に client と API を分けなくてもよかったのかなーともちょっと思ってる。特に end2end テストが色々大変になるとおもった。</p>

<h2>過剰なテスト</h2>

<p>JS で基本的にはテストを書けるところは書いてたと思う。とはいえ、自分は本当に効果的なテストが書けてたかというとそうでない箇所も多かった気もする。このプロジェクトよりも昔に刺身さんに「ここのテストいりますかねー？」とか話したら「自分だったらこのテストなら30分で書けるので本当に必要じゃないかもだけどとりあえず迷ったらつけとく」みたいなことを言ってて、それ以来自分もこの言葉は印象に残ってて迷ったらつけるようにしてるけど、過剰なテストは明らかにあってそういう のを今後は省いていきたいと思った。</p>

<h2>ソフトウェア開発つらいみたいな話</h2>

<p>スクラムっぽい感じで最初は進められてよかったけど、やっぱ8月の途中くらいから本格的に忙しくなって、いわゆる古典的なソフトウェア開発つらい... みたいな感じになった。このあたりは今後の改善もあるだろうけどもなんでなのかなーとはすごい思った。2013年だし気合みたいなので乗り切らなきゃいけない感じなのを改善したい。</p>

<h2>小さく作って、作りなおす</h2>

<p>今回の自分達のチームは Brunch + Chaplin.js で作ったけど、ロンドンで今動いてるチームは素の backbone.js + grunt で作ってて特にこれにする、という強い決まりがないのが個人的にはすごいいいなと思ってる。</p>

<p>以前ライブラリとかシステムの持続性みたいな話を @masatomon がしてたことがあったけど、「筋のいいのは生き残るという自然淘汰があると信じたいけど、そうでもない気がするし、筋がいいのを見抜けるかどうかもわからない、やっぱ、一個ずつのシステムを小さく作って、2年ぐらいで作りなおすのがいいんじゃないだろうか」ということを言ってた。実際 quipper のシステムはすごい疎結合になってて、プラグインみたいな機構もあるし、小さくモジュール化したシステムになっている。ただ一番の強みは役員であり技術チーフの人がそういう意識を持ってるのが心強くていいなーと思ってます。</p>

<h2>まとめ</h2>

<p>とりあえず今回は Ruby 3割、JS (Coffee) 7割くらいでずっと JS メインのプロジェクトはやりたかったので大変ではありましたが楽しかったです :)
あと開発者も<a href="http://www.quipper.com/japan/careers">募集</a>してるそうです。(アジアに飛ばしてほしい)</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[HipChat の pull-request-review-comment を既存の hook に適用させる]]></title>
    <link href="http://banyan.me/2013/09/27/1" />
    <updated>2013-09-27T10:01:37+09:00</updated>
    <id>http://banyan.me/2013/09/27/1</id>
    <content type="html"><![CDATA[
<p>HipChat の GitHub Integration はデフォルトの event が多くて便利だけど、
pull-request-review-comment はサポートとされてなかったけどやっと最近デフォルトで入った。</p>

<ul>
<li><a href="https://github.com/github/github-services/pull/695">Send pull<em>request</em>review_comment events to HipChat</a></li>
</ul>

<p>自分もその前の <a href="https://github.com/github/github-services/pull/648">pr</a> に微力ながら +1 とかしてたので非常に嬉しいけど
technoweenie さんが<a href="https://github.com/github/github-services/pull/695#issuecomment-24836222">ここ</a> で言ってるように
既存の hook には適用されない。update でもダメで、octokit で delete して create してもうまく適用されなかった。
edit で今の default_event を全部適用させるようにしてみて届くようにしました。</p>

<ul>
<li><a href="https://gist.github.com/banyan/6718410">update-hipchat-hooks-event.rb</a></li>
</ul>

<p>(というか元から API 経由だったら適用できたっぽいことを知らなかった</p>

]]></content>
  </entry>


</feed>

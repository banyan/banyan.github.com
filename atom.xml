<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[banyan.github.com]]></title>
  <link href="http://banyan.github.com/atom.xml" rel="self"/>
  <link href="http://banyan.github.com/"/>
  <updated>2012-07-09T02:04:00+09:00</updated>
  <id>http://banyan.github.com/</id>
  <author>
    <name><![CDATA[banyan.github.com]]></name>
  </author>
  <generator uri="https://github.com/mizzy/stellar/">Stellar</generator>


  <entry>
    <title type="html"><![CDATA[My Chef Solo]]></title>
    <link href="http://banyan.github.com/2012/07/09/1" />
    <updated>2012-07-09T02:04:00+09:00</updated>
    <id>http://banyan.github.com/2012/07/09/1</id>
    <content type="html"><![CDATA[
<p>僕の働いている<a href="http://paperboy.co.jp">会社</a>では、<a href="https://github.com/mizzy">mizzy</a> さんが <a href="https://github.com/mizzy/maglica">Maglica</a> という素晴らしいツール (Maglica の説明の<a href="http://mizzy.org/slides/maglica/">スライド</a>) を作られていて、VM が一瞬で構築できるようになってます。</p>

<p>これは本当に life changing で時間も削減できるし、また VM を作ったり消したりが気軽にできるので開発には本当に便利になりました。</p>

<p>しかしながら、先週チームに Windows を使うデザイナーがアサインしてきて (今までチームには Mac 使いしかいなかった) 、Maglica で VM を作って手作業で Linux の Rails 環境を一緒に構築してたけど、
せっかく VM の箇所が自動化できてるのにこういうことをやっちゃいけないなーと思いました。</p>

<p>ちょうど新卒の教育向けに <a href="https://github.com/hiboma">@hiboma</a> が Chef Solo Tutorial をしていたのもあったし、
僕もそれを見ててちょっと意識が高まったので少しでも自動化してみようと思いちょっとやってました。</p>

<p>Chef Solo 自体はちょうど1年半くらい前にさくらの VPS を構築する時にちょっとだけ触ったことある程度です。
その時の recipe、cookbook を見ると、なんというか色々入りすぎてて、もう使う気もしない感じでした。</p>

<p>ちなみに1年半前よりも GitHub で検索しても情報がすごい増えた気がしました。</p>

<p>ということで新しく作り直して、GitHub にあげてみました。</p>

<p><a href="https://github.com/banyan/chef">https://github.com/banyan/chef</a></p>

<p>こうしたほうがもっと幸せになれるとかあったら教えて頂けるとありがたいです。</p>

<p>サーバはさくらの VPS を契約して放置したままだったので、
それを使いながらと、あと EC2 で一個 VM 作ってそれと同時に試してました。</p>

<p>とりあえずの方針としては</p>

<ul>
<li>必ずいれるソフトウェアのパッケージを管理する

<ul>
<li>なるべくミニマムにする。本当に必要なものだけ。</li>
</ul></li>
<li>rbenv, ruby-build</li>
<li>ufw, ssh の設定をする</li>
<li>role をいい感じにわける</li>
</ul>

<p>というところでそれくらいまではできた感じです。</p>

<p>これからやることとしては、</p>

<ul>
<li>最初にいれる Ruby + Chef + Git も Capistrano で操作する</li>
<li>Unicorn</li>
<li>Supervisor</li>
<li>Mac (homebrew の管理)</li>
<li>Redhat 系の対応</li>
<li>Chef Solo + Capistrano</li>
<li>Role とかもっといい感じにできそう</li>
</ul>

<p>などがうまくできるようになるといいなと思います。</p>

<p>実際に改めて触ってみるとまだちょっとしかできてないけど、TDD 感覚でサーバを構築できるのは楽しい感じがしますね。</p>

<p>いまいち分かってないことや確信を得れてないことはまだたくさんあるのですが、
とりあえずまず晒しながら update していこうと思います。</p>

<h5>参考</h5>

<ul>
<li><a href="https://github.com/cookbooks">https://github.com/cookbooks</a></li>
<li><a href="http://d.hatena.ne.jp/sfujiwara/20120705/1341477250">chef-solo + capistrano で複数ホストを管理する</a></li>
<li><a href="https://github.com/opscode/cookbooks">https://github.com/opscode/cookbooks</a></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[GitHub の Organization の権限についてのメモ]]></title>
    <link href="http://banyan.github.com/2012/06/23/1" />
    <updated>2012-06-23T10:37:13+09:00</updated>
    <id>http://banyan.github.com/2012/06/23/1</id>
    <content type="html"><![CDATA[
<p>2012-06-23 現在のものなので、
また仕様がすぐに変わるかもしれないですがメモとして書いとく。</p>

<p>(仕様が変わったら更新する予定なのと、間違えてたら教えて頂けるとありがたいです。)</p>

<p>Organization を作ると Team を作ることが可能。
Team には今のところ3つの権限がある。</p>

<ul>
<li>Pull Only</li>
<li>Push &amp; Pull</li>
<li>Push Pull &amp; Administrative</li>
</ul>

<p>この他に実質的な管理者である</p>

<ul>
<li>Owner</li>
</ul>

<p>がある。</p>

<table>
  <tr>
    <th>権限</th>
    <th>issue を作るとメールが飛んでくるか</th>
    <th>Pull Request ができるか</th>
    <th>Organization の設定を管理画面からできるか</th>
  </tr>
  <tr>
    <th>Pull Only</th>
    <td>no</td>
    <td>no</td>
    <td>no</td>
  </tr>
  <tr>
    <th>Push & Pull</th>
    <td>yes</td>
    <td>no</td>
    <td>no</td>
  </tr>
  <tr>
    <th>Push Pull & Administrative</th>
    <td>yes</td>
    <td>yes</td>
    <td>no</td>
  </tr>
  <tr>
    <th>Owner</th>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
</table>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[tutor-for-non-programmer-and-non-designer]]></title>
    <link href="http://banyan.github.com/2012/06/15/1" />
    <updated>2012-06-15T01:12:43+09:00</updated>
    <id>http://banyan.github.com/2012/06/15/1</id>
    <content type="html"><![CDATA[
<p>社内の勉強会のようなもので、Rails 写経会というものがあって、そこでチューター的なことをした。
10人くらいの参加者のうち、8人が Mac、2人が Windows でまず開発環境を作りに取り掛かり、
僕は主に Windows の人と一緒に作業してた。</p>

<p>通常はプログラマやデザイナに何か伝えることはあっても
2人ともプログラマでもなくデザイナでもなかったので、どう伝えようかとか迷った。</p>

<p>気づいたこととして、</p>

<ul>
<li>とにかく typo が多い

<ul>
<li>typo をしない方法を伝えることが重要</li>
<li>なるべくコンソール上の作業では Tab キーを使うようにするとか</li>
<li>コピペを推奨

<ul>
<li>Windows のコマンドプロンプトはコピペも大変だったりする</li>
</ul></li>
<li>bundle と打ってください、と言っても 「bundle」という単語自体に馴染みがないので簡単には打てない</li>
<li>rails でも lails と typo したりする</li>
</ul></li>
</ul>

<p>このあたりの問題にある種新鮮な衝撃を覚えた。</p>

<p>僕自身プログラムを始めた時は、typo に苦しんでた気がする。
本を写経して、ドンとプログラムを実行して、エラーが出る時に、
一文字一文字確認するけど、間違ってないように見える。</p>

<p>間違ってないように見えるけど、それはどこかが間違っていて、
そうして、少しずつプログラムを入力しては実行して、ということを
経験から学んできた気がするけど、それにしても typo が多かったことにびっくりした。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Working with Unix Processes の Daemon Processes を社内勉強会で読んだメモ]]></title>
    <link href="http://banyan.github.com/2012/06/07/2" />
    <updated>2012-06-07T23:00:00+09:00</updated>
    <id>http://banyan.github.com/2012/06/07/2</id>
    <content type="html"><![CDATA[
<p>Working with Unix Processes の Daemon Processes を社内勉強会で読んだ。
以前さらっと読んだ時はふんふん...なるほどーとか読みながら読めたけど
すごい忘れてるし、そもそもじっくり話しながら読んだら自分は全然理解できてないことが分かった。</p>

<p>ので改めて読んでメモしとく。
まだ理解曖昧な部分はアップデートしていきたい</p>

<script src="https://gist.github.com/2889128.js"> </script>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Github の Deploy Keys の公開鍵のメモ]]></title>
    <link href="http://banyan.github.com/2012/06/07/1" />
    <updated>2012-06-07T10:57:00+09:00</updated>
    <id>http://banyan.github.com/2012/06/07/1</id>
    <content type="html"><![CDATA[
<p>Github を会社で使っています。とても快適です。</p>

<p>Github を会社で使えますよー、というのは求人条件とかに書いてもいいと思う。</p>

<p>それはさておき、今は Business Plans の Bronze の Plan を使っています。</p>

<p>Bronze Plan では 10個の Private Repository を作成することができますが、
そのひとつのリポジトリに対して、デプロイキー (公開鍵) を設定することができますが、
Github は公開鍵は全体で一意のものしか登録ができません。</p>

<p>したがって、リポジトリAを例えば CI サーバから取得するみたいな時に、
CI サーバの鍵を登録してしまうと、リポジトリBには同じ鍵を登録することができません。</p>

<p>もっといい方法があるかもしれませんが、今はデプロイだけをするユーザを新規作成して、
そのユーザを organization に追加して (Pull Only の権限)、そのユーザ自身の公開鍵を普通に SSH Keys から設定しておくことでこの問題を回避しています。
(秘密鍵を新しく作るサーバに配置する必要はあります)</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[pow + tunnels + launchd]]></title>
    <link href="http://banyan.github.com/2012/04/19/2" />
    <updated>2012-04-19T18:47:00+09:00</updated>
    <id>http://banyan.github.com/2012/04/19/2</id>
    <content type="html"><![CDATA[
<p><a href="https://github.com/jugyo/tunnels">tunnels</a> is awesome which enables us runnning pow over SSL.</p>

<pre><code>$ gem install tunnels
$ sudo tunnels (just to use)
</code></pre>

<p>And it&#39;s better to work in the background by launchd.</p>

<pre><code>$ sudo vi /Library/LaunchDaemons/org.rubygems.tunnels.plist
</code></pre>

<script src="https://gist.github.com/2420053.js"> </script>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[はてなスターを導入した]]></title>
    <link href="http://banyan.github.com/2012/04/19/1" />
    <updated>2012-04-19T02:19:00+09:00</updated>
    <id>http://banyan.github.com/2012/04/19/1</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Stellar & Skelton を使ってみる]]></title>
    <link href="http://banyan.github.com/2012/04/17/1" />
    <updated>2012-04-17T03:23:00+09:00</updated>
    <id>http://banyan.github.com/2012/04/17/1</id>
    <content type="html"><![CDATA[
<p><a href="http://github.com/mizzy/stellar/">Stellar</a> (A static site generator) と Skelton (CSS framework) を使ってブログじゃないけど始めてみる。</p>

<p><a href="http://higelog.brassworks.jp/?p=2076">Nanoc以外の静的サイト生成ツールを調べてみた</a></p>

<p>色々種類がありすぎて、どれを使うか悩みますけど、Stellar は機能がすごい削いであるのでとりあえずこれで始めて慣れてみたい。</p>

<p>しかしながら MT とか WordPress とかあって、一周して、ここまで削がれた感をすごい感じます。</p>

<p>もうちょっとデザインを調整したいのと、それでもはてなよりはすでに書きやすいなぁ。</p>

<p>英語でもちょこちょこエントリを書いていきたい</p>

]]></content>
  </entry>


</feed>

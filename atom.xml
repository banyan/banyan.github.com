<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@banyan's blog]]></title>
  <link href="http://banyan.me/atom.xml" rel="self"/>
  <link href="http://banyan.me/"/>
  <updated>2014-07-22T02:00:47+09:00</updated>
  <id>http://banyan.me/</id>
  <author>
    <name><![CDATA[@banyan's blog]]></name>
  </author>
  <generator uri="https://github.com/mizzy/nebel/">nebel</generator>


  <entry>
    <title type="html"><![CDATA[会社の hubot 公開した]]></title>
    <link href="http://banyan.me/2014/07/22/2" />
    <updated>2014-07-22T02:00:47+09:00</updated>
    <id>http://banyan.me/2014/07/22/2</id>
    <content type="html"><![CDATA[
<p>OMG の<a href="http://tech.ohmyglasses.jp/blog/2014/06/20/life-that-there-is-a-hubot/">記事</a>を見ていいなと思って、会社の hubot publicize した。</p>

<p><a href="https://github.com/quipper/quipper-hubot">quipper/quipper-hubot</a></p>

<p>script の数が少ないうちにえいやっと公開するのがよさそう。まだ少なかったのでよかったです。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[フィリピンでエンジニアインターンしてみた]]></title>
    <link href="http://banyan.me/2014/07/22/1" />
    <updated>2014-07-22T01:46:21+09:00</updated>
    <id>http://banyan.me/2014/07/22/1</id>
    <content type="html"><![CDATA[
<h3>経緯</h3>

<ul>
<li>フィリピンに会社の支社ができて、1週間出張に行くことになった。</li>
<li>学校見学したり、ミートアップ的なことをしたりした。このあたりは @kyanny 氏の<a href="http://blog.kyanny.me/entry/2014/07/13/000647">ブログに詳しい</a></li>
<li>ついでに3,4,5月にハードに働いていたため代休が溜まっていたので1週間使って英語の学校で勉強するか、インターンしてみようか、考えてみた。</li>
</ul>

<h3>なぜインターンか</h3>

<ul>
<li>昔 deeeki さんの<a href="http://d.hatena.ne.jp/deeeki/20130628/programmer_intern_philippines">ブログ</a>見てて面白そうだな、と思ってた。</li>
<li>あと、今働いてる会社にビジネス寄りの人でインターンしてる人が多くて、インターンっていうと大学生がやるものみたいな印象もあったけど、そうでもないんだな、と思うようになった。</li>
<li>英語の実践の勉強として</li>
<li>単純に気分転換したかった</li>
<li>フィリピンの Ruby の会社とかどんな感じか見てみたかった</li>
</ul>

<h3>会社探し</h3>

<ul>
<li>とりあえずフィリピン人の同僚にマニラ で Ruby/JS で有名な会社ってどこかな？って聞いてみたら <a href="http://www.proudcloud.net/">Proudcloud</a> って教えてくれた。</li>
<li>1週間だけだけど、インターンとかできますか？ って言って、簡単な自己紹介と GitHub のアカウントつけてメールしてみたら向こうの CEO から翌日返信が来て、「Sure come over! (もちろん、来てください)」と一行のメールが返ってきた。</li>
<li>このカジュアルさに衝撃を受けつつ、まぁ行ってみて拒否られたら、もう旅行とかすればいいや、と思って行ってみることにした</li>
</ul>

<h3>会社に行く</h3>

<ul>
<li>なかなか最初に着くまでが渋滞してたりして大変だった。あと会社も入り口が地味でよく分かんなかった。</li>
<li>受付の人に「あのー今日からインターンの予定の者なんですけど...」って言ってみてもかなり不審がられた (気がする)。 当然のように情報伝わってないっぽかった。</li>
<li>その後 CTO (Jason) が出てきて、なんとかなった。</li>
</ul>

<h3>やったこと</h3>

<ul>
<li>さすがに期間が短いから、ちょっと本体のプロジェクトだと色々説明に時間がかかってしまうから、みたいな感じでなんか社内の遊び (趣味?) プロジェクトに入った。このプロジェクトが何なのかはよく分からなかった。(でもデザイナとか社内のリソースは使ってた)</li>
<li>ビットコイン詳しい？って聞かれて、いやあんまり... というやりとりの後、フィリピンのビットコインの野良 API をまとめて、influxdb にデータをいれて、それを influxdb の Native HTTP API を使って HTML から直接 json を取得するみたいなことをした。</li>
<li>サーバ側は node ですでにちょっと書かれてて、これを Rails にしてもいいけどどうする？みたいな話をしてて、とりあえず node でいいでしょう、となった。</li>
<li>CI は wercker を使ってて、wercker 使ったことなかったけど、influxdb でテスト通すための <a href="https://github.com/banyan/box-influxdb">box</a> とか作ってみた。</li>
<li>クライアント側は慣れてる <a href="http://brunch.io/">brunch</a> を使って別リポジトリにして作った。</li>
<li>一応デザイン以外ひと通り完成した。</li>
<li>2日目で、you should be working here! と褒められた</li>
<li>1日台風でマニラ中が停電になって、出社できなかった。</li>
</ul>

<h3>最後にLTさせてもらう</h3>

<ul>
<li>最後に今回自分が作ったもの、自分の今の会社のこと、自分の会社でこの1年やったことをLTした。</li>
<li>一応みんな dev 以外の人も集まってくれて、聞いてくれてたりした。</li>
<li>自分の今の会社のスライドで We&#39;re hiring! という文があって、一応言っといた。我ながらインターンとしていっておきながら大胆に宣伝するというのはどうかとちょっと思った。Jason は We&#39;re hiring, too って言ってた。</li>
</ul>

<h3>その他</h3>

<ul>
<li>GitHub/HipChat 英語には最近自信がついてきた気がするけど、依然としてリスニング/スピーキングは弱い。特にフィリピン人の発音が聞き取りやすい人となまってる人が顕著な気がする。自分は英語ができない思いをしないとなかなか勉強のモチベーションが続かないタイプ(絶望ドリブン) なのでそういう点ではよかった。</li>
<li>会社の中は窓がなくて電気も暗かった。</li>
<li>モニタとか椅子とかは普通によかった。</li>
<li>フィリピン人歌をかなり本気で口ずさむ人が多かった。鼻歌というより普通に歌ってて、日本だとあの音量で歌う人は見たことない。そしてみんな誰も気にしてなかった。</li>
<li>自分が働いてる会社のフィリピン人の英語はみんな上品な感じだけど、なんか Prowdcloud の人はヒップホップっぽい感じを受けた。</li>
<li>CEO が自分達はとにかくインターンは受け入れたいんだ。国籍がなんであれ、期間がなんであれ、みんな好きに滞在して出て行く、みたいなことを言ってた。梁山泊ぽかった。実際自分がいた時はマーケティング系の黒人系フランス人がいた。</li>
<li>ご飯毎日誘ってもらって食べたりしてた。</li>
<li>Proudcloud は受託がメインの会社だけど、自社 (レベニューシェア的なやつ) でもちょっと最近はやってるらしい。</li>
<li>Prowdcloud は今は Ruby エンジニア15人くらいいる。</li>
<li>何の仕事をやってるの？と聞くと、自分は JavaScript エンジニアだ、と答える人も結構いた。でも最近は JS のプロジェクトはないので Rails をメインでやってると言ってた。</li>
<li>フィリピンでは .NET, Java が仕事では多くて、Ruby の会社は珍しいそう、あと Rails エンジニアはバブってる感じだった。</li>
<li>Jason はビットコインをかなり持ってると言ってた。あと今年の RubyKaigi2014 には行くそうなので、もし行かれる人はぜひ話してあげてください。すごいいい人です。</li>
<li><a href="http://blog.fujimuradaisuke.com/post/39745641588/etsy-twitter">EtsyとTwitterがエンジニア交換プログラムをやっている</a> という話とか、いいなぁとは思うんだけど実際にどこもなかなかできないと思う。インターンとか、もっとカジュアルにできると面白いと思う。当然どう情報の機密性を担保するかという話にはなるけど、そういうのがもっとできるようにしていきたいなぁと受け入れてもらう側になることで思ったりしました。</li>
<li>8月からフィリピンで2ヶ月更に出張の予定なので、フィリピンにはまだ縁がありそうです :)</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Dokku の LT してきた]]></title>
    <link href="http://banyan.me/2014/01/16/1" />
    <updated>2014-01-16T22:38:27+09:00</updated>
    <id>http://banyan.me/2014/01/16/1</id>
    <content type="html"><![CDATA[
<p><a href="http://herokujp.doorkeeper.jp/events/8004">Heroku Meetup #11 New Year Party!!</a> で <a href="https://github.com/progrium/dokku">Dokku</a> の話を LT してきた。</p>

<p><a href="http://banyan.me/slides/20140116/slides.html">Inside Dokku in 5 minutes</a></p>

<p>5分過ぎると5分過ぎてますよーとかドラが鳴るとかはなく、ケーブルを抜いて終わるという strict な感じな LT だった。</p>

<p>5分なので Dokku スライドに書かなかった内容としては、</p>

<ul>
<li>Ubuntu 13.04 で動かす必要がある (Ubuntu 13.10 だと Docker 側にバグがあって docker 0.8.* 系で修正される予定らしい、<a href="https://github.com/dotcloud/docker/issues/1300">これ</a>と<a href="https://github.com/dotcloud/docker/issues/1906">これ</a>)</li>
<li>クリーンインストールを前提としている</li>
<li>サーバのホストネームが名前解決されない時は <code>/home/dokku/VHOST</code> に手動でホスト名を書く必要がある</li>
<li>Docker のバージョンがあがって Docker 側に regression がある時は  <code>DOCKER_VERSION=0.7.5 make install</code> とかして Docker のバージョン固定する (<a href="https://github.com/progrium/dokku/pull/407">PR</a>)</li>
<li><code>/home/dokku/dokkurc</code> に <code>export DOKKU_TRACE=1</code> と書くとログが出るのでデバッグとか流れを追うのに便利</li>
<li><code>dokku run [application name] rake db:migrate</code> とかで migrate は手動で行う必要がある</li>
<li>MySQL plugin とかは前は動いてと思うけど、docker, dokku 共に変更が加えられて動かなくなってる。<a href="https://github.com/banyan/dokku-mysql-plugin">https://github.com/banyan/dokku-mysql-plugin</a> の fork はとりあえず動いてる。PostgreSQL は plugin たくさんある。</li>
<li>これは dokku の問題ではなく docker の問題だけど、status が Ghost の Docker が出てしまうことがあった。<a href="https://github.com/dotcloud/docker/issues/2419">https://github.com/dotcloud/docker/issues/2419</a> docker 側でもよくわかってないらしい。確かに kill とか stop はできなかったけど、docker restart したら自分の場合は普通に直った。</li>
<li>root domain の設定は <a href="https://github.com/progrium/dokku/wiki/Deploying-to-root-and-subdomains">https://github.com/progrium/dokku/wiki/Deploying-to-root-and-subdomains</a> に書いてある</li>
</ul>

<p>Dokku の仕組み面白いと思いました。SSH の本とかもやはり読みたいなーと思った。
あとはプレゼンをもう少しなんとかしたい。同僚の @kyanny はリビングプレゼンテーション Zen という感じなのでもう少し何とか吸収したいなぁ &gt;&lt;</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[jenkins-ci-skip-plugin を書いてみた]]></title>
    <link href="http://banyan.me/2013/12/24/1" />
    <updated>2013-12-24T01:40:37+09:00</updated>
    <id>http://banyan.me/2013/12/24/1</id>
    <content type="html"><![CDATA[
<p><a href="https://github.com/banyan/jenkins-ci-skip-plugin">jenkins-ci-skip-plugin</a></p>

<p><code>[ci skip]</code> という文字列がコミットに含まれているとビルドをスキップするというのが Travis CI にあって、Circle CI も同じ機能がある。</p>

<ul>
<li><a href="http://about.travis-ci.org/docs/user/how-to-skip-a-build/">Travis CI: How to skip a build</a></li>
<li><a href="https://circleci.com/docs/skip-a-build">Skip a build - CircleCI</a></li>
</ul>

<p>Rails とかはたくさんの environment でテストされているのでドキュメントの変更の場合は必ずコミットに含むように書いてある。</p>

<ul>
<li><a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation">http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation</a></li>
</ul>

<p>で、それを Jenkins でも同じようにできるようにするというもの。あんまり必要は感じてなかったんだけど、最近 Docker とか使ってテストするようになって feature branch とかでテストをパスできるんならしたいなと思うことがあったので書いてみました。</p>

<p>Jenkins は Changeset の差分で見るので、もし Changeset の最新のコミットに文字列が含まれていれば NOT BUILT としてスキップされるけど、そのビルドを手動でもう一度ビルドを走らせる時は Changeset がない状態になるのでビルドが走ります。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Git の hook で未来のコミットを書き換える]]></title>
    <link href="http://banyan.me/2013/11/21/1" />
    <updated>2013-11-21T10:47:13+09:00</updated>
    <id>http://banyan.me/2013/11/21/1</id>
    <content type="html"><![CDATA[
<p>最近 Mac で &quot;Set date and time automatically&quot; のチェックを外し、
日付を変えて開発をすることが多いのですが、ありがちなのがそのまま commit してしまうことで、
まだ PR 中に気付ければいいけど、それが merge されてしまって、更にその上に変更をかぶせてしまってたりすると
直すのがなかなか大変でめんどくさい (filter-branch とか使う) ので git の <s>pre-commit でもし日付が変更されている状態なら日付を戻して commit するようにした。</s>
実際は履歴が気持ち悪くなるだけで特に副作用はないけれど。</p>

<p><code>
$ sudo lsof -i:123 -P
</code></p>

<p>ポートが使われているかどうかは lsof とかで調べればいいけど、チェック自体をコマンドラインからどうやって制御すればいいかなと思ったけど、以下のコマンドがあったことを初めて知った。</p>

<p><code>
$ systemsetup -setusingnetworktime on
</code></p>

<p><code>
$ git config --global init.templatedir &#39;~/.git_template&#39;
</code></p>

<p>を実行した後、</p>

<p><a href="https://gist.github.com/banyan/7574810">https://gist.github.com/banyan/7574810</a></p>

<p><s>を ~/.git_template/hooks 以下とかに pre-commit という名前で実行権限つけて保存すればOK。
新規のリポジトリを作る際は hooks 以下に pre-commit というファイルができていれば OK で、既存のリポジトリに適用させる場合は git init で reinitialize すればよかった。</s></p>

<p>当初 pre-commit でできると思ったけど、実際に Mac の時間は戻るけど、git の commit object が先に作られてしまう (もう少し調べる) ため pre-commit の時に時間を戻してもダメだった。
なのであんまりきれいな方法じゃないけど、post-commit で時間を戻した後に commit --amend する方法にした。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Quipper で最初のリリースなので振り返る]]></title>
    <link href="http://banyan.me/2013/10/22/1" />
    <updated>2013-10-22T23:24:04+09:00</updated>
    <id>http://banyan.me/2013/10/22/1</id>
    <content type="html"><![CDATA[
<p>5月に Quipper に入ってやっと最初のリリースが迎えられそうな中、チームのメンバー全員がなぜかブログを書き始めた。なんなのこれ...</p>

<ul>
<li><a href="http://blog.kyanny.me/entry/quipper-sense-of-speed">Quipper のスピード感</a></li>
<li><a href="http://mizchi.hatenablog.com/entry/2013/10/22/124107">自分の強みを生かすこと on Quipper</a></li>
<li><a href="http://hakobera.hatenablog.com/entry/2013/10/22/133014">Github Issues を利用したリリースマネージャのお仕事</a></li>
<li><a href="http://dagezi.hatenablog.com/entry/2013/10/22/135057">Quipperでのおじさんエンジニアの立ち位置</a></li>
<li><a href="http://blog.fujimuradaisuke.com/post/64753754298/quipper-html5">QuipperでHTML5アプリを作ってる話</a></li>
<li><a href="http://mzbqpmb.wordpress.com/2013/10/22/quipper%E3%81%AEhr%E6%B4%BB%E5%8B%95%EF%BC%88%E3%82%B9%E3%83%86%E3%83%9E%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%82%88%EF%BC%89/">Quipperのエンジニアのblog day（ステマじゃないよ）</a></li>
</ul>

<p><blockquote class="twitter-tweet"><p>でも <a href="https://twitter.com/banyan">@banyan</a> さんが日記書くまでは寝るわけにいかない。</p>&mdash; 北市真 (@KitaitiMakoto) <a href="https://twitter.com/KitaitiMakoto/statuses/392649527267561472">October 22, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>同調圧力は見て見ぬふりをしてたけど、外部のブログ圧力に負け僕も書くことにします。</p>

<h2>Pull Request の粒度</h2>

<p>6月に最初は開発者4人でスタートして、8月に Android 開発者の @dagezi さん、9月に @mizchi さん、で9月途中くらいから @hakobera さんにリリースマネージャとして入ってもらった。
4人メインでいると Pull Request の粒度はどんどん小さいものになっていてちゃんと Pull Request が回るのは4人くらいからなのかなーと思った。レビューしてマージする流れが早ければどんどん粒度も小さくなっていくけど、これが2人しかいないとかだとどうしても Pull Request の粒度も大きいものになってしまってレビューも更に時間がかかる、という感じになる。</p>

<p>ピークの時は小さいものもどんどん送るので月500個くらいチームとして Pull Request 投げてたと思う。リポジトリは結構たくさんあって、client, api, plugins みたいな感じでも別れてるので、<a href="https://github.com/banyan/pending-pr">pending-pr</a> みたいなツール作って朝出社したら Jenkins からリマインドしてもらうようにした。</p>

<h2>Brunch + Chaplin.js よかった</h2>

<p>作ってたのは HTML5 アプリ(HTML + CSS + JavaScript のクライアント) で最初フレームワークとか何を使おうと色々考えたけど、@fujimura さんが brunch + chaplin.js がよさそうということでそれを選択した。
brunch は結局必要になるいろんなものが最初から全部あるので使ってみた感想としてはよかった。特に最初からテストがすぐ動かせるというのは大きいと思う。アプリケーションは S3 + CloudFront で動かしてる。(API は heroku)</p>

<p>とはいえ、完全に client と API を分けなくてもよかったのかなーともちょっと思ってる。特に end2end テストが色々大変になるとおもった。</p>

<h2>過剰なテスト</h2>

<p>JS で基本的にはテストを書けるところは書いてたと思う。とはいえ、自分は本当に効果的なテストが書けてたかというとそうでない箇所も多かった気もする。このプロジェクトよりも昔に刺身さんに「ここのテストいりますかねー？」とか話したら「自分だったらこのテストなら30分で書けるので本当に必要じゃないかもだけどとりあえず迷ったらつけとく」みたいなことを言ってて、それ以来自分もこの言葉は印象に残ってて迷ったらつけるようにしてるけど、過剰なテストは明らかにあってそういう のを今後は省いていきたいと思った。</p>

<h2>ソフトウェア開発つらいみたいな話</h2>

<p>スクラムっぽい感じで最初は進められてよかったけど、やっぱ8月の途中くらいから本格的に忙しくなって、いわゆる古典的なソフトウェア開発つらい... みたいな感じになった。このあたりは今後の改善もあるだろうけどもなんでなのかなーとはすごい思った。2013年だし気合みたいなので乗り切らなきゃいけない感じなのを改善したい。</p>

<h2>小さく作って、作りなおす</h2>

<p>今回の自分達のチームは Brunch + Chaplin.js で作ったけど、ロンドンで今動いてるチームは素の backbone.js + grunt で作ってて特にこれにする、という強い決まりがないのが個人的にはすごいいいなと思ってる。</p>

<p>以前ライブラリとかシステムの持続性みたいな話を @masatomon がしてたことがあったけど、「筋のいいのは生き残るという自然淘汰があると信じたいけど、そうでもない気がするし、筋がいいのを見抜けるかどうかもわからない、やっぱ、一個ずつのシステムを小さく作って、2年ぐらいで作りなおすのがいいんじゃないだろうか」ということを言ってた。実際 quipper のシステムはすごい疎結合になってて、プラグインみたいな機構もあるし、小さくモジュール化したシステムになっている。ただ一番の強みは役員であり技術チーフの人がそういう意識を持ってるのが心強くていいなーと思ってます。</p>

<h2>まとめ</h2>

<p>とりあえず今回は Ruby 3割、JS (Coffee) 7割くらいでずっと JS メインのプロジェクトはやりたかったので大変ではありましたが楽しかったです :)
あと開発者も<a href="http://www.quipper.com/japan/careers">募集</a>してるそうです。(アジアに飛ばしてほしい)</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[HipChat の pull-request-review-comment を既存の hook に適用させる]]></title>
    <link href="http://banyan.me/2013/09/27/1" />
    <updated>2013-09-27T10:01:37+09:00</updated>
    <id>http://banyan.me/2013/09/27/1</id>
    <content type="html"><![CDATA[
<p>HipChat の GitHub Integration はデフォルトの event が多くて便利だけど、
pull-request-review-comment はサポートとされてなかったけどやっと最近デフォルトで入った。</p>

<ul>
<li><a href="https://github.com/github/github-services/pull/695">Send pull<em>request</em>review_comment events to HipChat</a></li>
</ul>

<p>自分もその前の <a href="https://github.com/github/github-services/pull/648">pr</a> に微力ながら +1 とかしてたので非常に嬉しいけど
technoweenie さんが<a href="https://github.com/github/github-services/pull/695#issuecomment-24836222">ここ</a> で言ってるように
既存の hook には適用されない。update でもダメで、octokit で delete して create してもうまく適用されなかった。
edit で今の default_event を全部適用させるようにしてみて届くようにしました。</p>

<ul>
<li><a href="https://gist.github.com/banyan/6718410">update-hipchat-hooks-event.rb</a></li>
</ul>

<p>(というか元から API 経由だったら適用できたっぽいことを知らなかった</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[mocha-phantomjs@3.1.0 requires mocha.js@1.12.0 or later]]></title>
    <link href="http://banyan.me/2013/07/09/1" />
    <updated>2013-07-09T16:49:43+09:00</updated>
    <id>http://banyan.me/2013/07/09/1</id>
    <content type="html"><![CDATA[
<pre><code>$ mocha-phantomjs public/test/index.html
TypeError: &#39;undefined&#39; is not an object (evaluating &#39;Mocha.process.stdout&#39;)

  mocha-phantomjs/core_extensions.js:17
  mocha-phantomjs/core_extensions.js:58
</code></pre>

<p><a href="https://github.com/metaskills/mocha-phantomjs">mocha-phantomjs@3.1.0</a> から mocha.js は 1.12.0 以上であることが必要になりました。
後方互換性がない変更のようです。</p>

<h3>refs:</h3>

<ul>
<li><a href="https://github.com/metaskills/mocha-phantomjs/pull/75">use mocha 1.12.x</a></li>
<li><a href="https://github.com/metaskills/mocha-phantomjs/issues/76">mocha-phantomjs@3.1.0 doesn&#39;t work</a></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[vcr の結果はバージョン管理に含めるべきかどうか]]></title>
    <link href="http://banyan.me/2013/06/07/1" />
    <updated>2013-06-07T02:43:47+09:00</updated>
    <id>http://banyan.me/2013/06/07/1</id>
    <content type="html"><![CDATA[
<p><a href="https://github.com/vcr/vcr">vcr</a> は便利な gem で、外部の API などと通信するときにレスポンスをキャッシュして、以降はそのキャッシュを利用してテストを書くことができる gem です。
少し癖はありますが基本的には便利で、vcr 自体については <a href="http://railscasts.com/episodes/291-testing-with-vcr?view=comments">railscasts</a> とかに詳しいと思います。</p>

<p>一方で使っていて、確信を持てなかったのが、その vcr を使ったキャッシュををバージョン管理してしまっていいかでした。
自分は含めて使っていましたが、PR の差分も大きくなるし、いつも少し迷ってました。(言語化できない罪悪感があった)</p>

<p>railscasts のコメントの中でメンテナの <a href="https://github.com/myronmarston">Myron Marston</a> さんがこのことについて書いていたのでこれを訳しておこうと思います。</p>

<blockquote>
<p>これはトレードオフの問題で、あなたがどうしたいのかで変わってきます。自分自身の使い方としては、VCR cassets をバージョン管理する傾向が多いです。
その理由は、ある特定のタイミングでどんな HTTP response だったかの歴史を持つことができるのが好きだからです。git bisect をして、テストを通すことも可能です。
もし cassets がコミットされていなければ、そして HTTP response が変わっていたら、古い状態でテストが通った時の commit しかないため大変になるでしょう。</p>

<p>一方で cassets をコミットするということは、多くのファイルができるため git リポジトリが膨れ上がります。
またレスポンスを手動で微調整してテストを通すことも簡単になります。
私は cassets (vcr のキャッシュ) をコミットしないことはそれをただキャッシュとして扱うことだと思っていて好ましく思います。(訳が怪しい)</p>

<p>最終的にはあなたがどう考えるか次第です - 今ここであげたメリット・デメリットがあなたにとってどちらが大切かということを考えてみてください。</p>

<p><a href="http://railscasts.com/episodes/291-testing-with-vcr?view=comments#comment_162799">http://railscasts.com/episodes/291-testing-with-vcr?view=comments#comment_162799</a></p>
</blockquote>

<p>時としてバージョン管理していいかどうか迷うような状況は色々な理由でやってきたりすることはあると思うのですが、こういう指針があるのはありがたいなーと思いました。</p>

<h3>Updated.</h3>

<p>railcasts の Ryan さんにこのコメントの部分だけ訳していいですか？って聞いたら、いいよと言ってくれました。</p>

<p><blockquote class="twitter-tweet"><p>@<a href="https://twitter.com/banyan">banyan</a> that’s fine with me. Thanks for translating.</p>&mdash; Ryan Bates (@rbates) <a href="https://twitter.com/rbates/status/342707440959225856">June 6, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[PORO の model に自動で ActiveModel::ForbiddenAttributesProtection を include する]]></title>
    <link href="http://banyan.me/2013/06/06/1" />
    <updated>2013-06-06T19:45:05+09:00</updated>
    <id>http://banyan.me/2013/06/06/1</id>
    <content type="html"><![CDATA[
<p>Strong Parametes を使うには、各 model で ActiveModel::ForbiddenAttributesProtection を include してあげる必要があります。</p>

<p>ただ毎回手作業でやると忘れたりする可能性があるので config/initializers/strong_parameters.rb とかに</p>

<pre><code>ActiveRecord::Base.send(:include,  ActiveModel::ForbiddenAttributesProtection)
</code></pre>

<p>としてあげると自動で include されます。(ということを <a href="http://railscasts.com/episodes/371-strong-parameters">railscasts で見ました</a>)</p>

<p>今の自分のプロジェクトでは mongomapper を使っていて PORO (Plain Old Ruby Objects) の class なので</p>

<pre><code>def class_exists?(class_name)
  klass = Module.const_get(class_name)
  return klass.is_a?(Class)
rescue NameError
  return false
end

Dir.foreach(&quot;#{Rails.root}/app/models&quot;) do |model_path|
  class_name = File.basename(model_path, &quot;.rb&quot;).classify
  next unless class_exists?(class_name)
  klass = Object.const_get class_name
  klass.class_eval { include ActiveModel::ForbiddenAttributesProtection }
end
</code></pre>

<p>こんな感じで include するようにしました。</p>

<pre><code>&gt; p Post.included_modules
=&gt; [ActiveModel::ForbiddenAttributesProtection,
...
</code></pre>

<p>include されていて、
前回<a href="http://banyan.me/2013/06/02/1/">書いた設定</a>で ActionController::UnpermittedParameters が raise されることを確認できました。</p>

]]></content>
  </entry>


</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@banyan's blog]]></title>
  <link href="http://banyan.me/atom.xml" rel="self"/>
  <link href="http://banyan.me/"/>
  <updated>2013-06-02T18:47:31+09:00</updated>
  <id>http://banyan.me/</id>
  <author>
    <name><![CDATA[@banyan's blog]]></name>
  </author>
  <generator uri="https://github.com/mizzy/nebel/">nebel</generator>


  <entry>
    <title type="html"><![CDATA[Strong Parameters の action_on_unpermitted_parameters の振る舞いについて]]></title>
    <link href="http://banyan.me/2013/06/02/1" />
    <updated>2013-06-02T18:47:31+09:00</updated>
    <id>http://banyan.me/2013/06/02/1</id>
    <content type="html"><![CDATA[
<p>Rails4 から Rails のコアに取り込まれた Strong Parameters は、それまでの Model 側で mass assignments 対策を attr_accessible / attr_protected を使って行なっていたことに比べると、Controller 側で制御することは利用する側から言えば、とてもわかりやすくなったと思う。</p>

<p>Strong Parameters の詳細は <a href="http://edgeguides.rubyonrails.org/action_controller_overview.html#strong-parameters">edgeguides.rubyonrails.org の Strong Parameters の箇所</a>を見るといいと思います。</p>

<p><code>
$ rails g scaffold post title content:text published:boolean
</code></p>

<p>Rails 4.0.0.rc1 で scaffold してみると</p>

<pre><code>class PostsController &lt; ApplicationController
# ... (略)
  def create
      @post = Post.new(post_params)
# ... (略)
  private
# ... (略)
    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:title, :content, :published)
    end
</code></pre>

<p>こんな感じで生成される。</p>

<p>require で指定されたキーがない場合は例外が起こる。</p>

<pre><code>&gt; ActionController::Parameters.new(person: { name: &#39;Francesco&#39; }).require(:person)
# =&gt; {&quot;name&quot;=&gt;&quot;Francesco&quot;}

&gt; ActionController::Parameters.new(person: nil).require(:person)
# =&gt; ActionController::ParameterMissing: param not found: person

&gt; ActionController::Parameters.new(person: {}).require(:person)
# =&gt; ActionController::ParameterMissing: param not found: person
</code></pre>

<p>一方 permit で指定したキー (カラム名に相当する) は configure option で設定しない限りログだけ吐かれて例外が起こらない。</p>

<pre><code>&gt; ActionController::Parameters.new(person: { name: &#39;Francesco&#39; }).require(:person).permit(:foo)
Unpermitted parameters: name
=&gt; {}
</code></pre>

<p>該当のソースは <a href="https://github.com/rails/rails/blob/31219045ebde6acd26b0f023d006836fc2c10f88/actionpack/lib/action_controller/metal/strong_parameters.rb">actionpack/lib/action<em>controller/metal/strong</em>parameters.rb@3121904</a> で (SHA-1 は 2013/06/02 の HEAD)</p>

<pre><code>247     def permit(*filters)
248       params = self.class.new
249
250       filters.flatten.each do |filter|
251         case filter
252         when Symbol, String
253           permitted_scalar_filter(params, filter)
254         when Hash then
255           hash_filter(params, filter)
256         end
257       end
258
259       unpermitted_parameters!(params) if self.class.action_on_unpermitted_parameters
260
261       params.permit!
262     end
...
340       def unpermitted_parameters!(params)
341         unpermitted_keys = unpermitted_keys(params)
342         if unpermitted_keys.any?
343           case self.class.action_on_unpermitted_parameters
344           when :log
345             name = &quot;unpermitted_parameters.action_controller&quot;
346             ActiveSupport::Notifications.instrument(name, keys: unpermitted_keys)
347           when :raise
348             raise ActionController::UnpermittedParameters.new(unpermitted_keys)
349           end
350         end
351       end
</code></pre>

<p>259行目に指定されている action_on_unpermitted_parameters は <a href="https://github.com/rails/rails/blob/31219045ebde6acd26b0f023d006836fc2c10f88/actionpack/lib/action_controller/railtie.rb">actionpack/lib/action_controller/railtie.rb@312190</a> でデフォルトの振る舞いが指定されている。</p>

<pre><code>22     initializer &quot;action_controller.parameters_config&quot; do |app|
23       options = app.config.action_controller
24
25       ActionController::Parameters.permit_all_parameters = options.delete(:permit_all_parameters) { false }
26       ActionController::Parameters.action_on_unpermitted_parameters = options.delete(:action_on_unpermitted_parameters) do
27         (Rails.env.test? || Rails.env.development?) ? :log : false
28       end
29     end
</code></pre>

<p>27行目にあるように Rails.env が test か development の時は log に &#39;Unpermitted parameters:&#39; というログが出るだけでその値は nil になる。一方で production でも nil になる。</p>

<p>結論から先に書くべきだけど、なんでこんな振る舞いになっているかと思った。例えば Rails3 から Rails4 に upgrade して Strong Parameters に対応させる時 permit 忘れのバグがたくさん出そうだし、テストコードでそういうものをすべてカバーできるほどのテストはなかなか書いてないと思うのでデフォルトは :raise でいいのではないかと思いました。(実際自分の遊びのアプリケーションでもバグが出た)</p>

<p>この振る舞い自体はこの <a href="https://github.com/rails/rails/commit/57126ee5e392a4dc2eed22963d25020a48a93413">commit</a> で変更されていて、そしてこのことが議論されているのがこの <a href="https://github.com/rails/strong_parameters/pull/75">PR</a> になる。rails/rails と rails/strong_parameters で議論が別れていて追いにくいけど多分以下のような流れになっていると思う。</p>

<ol>
<li>unpermitted parameters がそのまま nil になってしまうのでなんとかできないかという <a href="https://github.com/rails/strong_parameters/issues/66">issue</a> があがる</li>
<li>それを受けて、configure option として raise できるようになった PR が<a href="https://github.com/rails/strong_parameters/pull/75">これ</a>。</li>
<li>config/environments 以下の development.rb や test.rb のテンプレートに ActionController::Parameters.action_on_unpermitted_parameters の設定もできるようにしたほうがいいかどうかという話で DHH は「Because nobody is really ever want to change it」と<a href="https://github.com/rails/rails/pull/8752#issuecomment-11893845">言って</a>、デフォルトのテンプレートの設定するところには出さないようにしている。</li>
</ol>

<h3>まとめ</h3>

<p>ということで非常に長くなってしまったけど、デフォルトで :raise したほうがいいかの議論はまだされてない気がする。これは PR したほうがいい気がするんだけどどうなんだろうか...</p>

<p>とりあえずは config/application.rb や config/environments/*.rb で以下のようにすれば permit に許可してない値が入ってきた時に例外が起こるように設定はできるので、そうしたほうが検知できていいと思う。</p>

<p><code>
config.action_controller.action_on_unpermitted_parameters = :raise
</code></p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Joining Quipper]]></title>
    <link href="http://banyan.me/2013/05/27/1" />
    <updated>2013-05-27T22:45:24+09:00</updated>
    <id>http://banyan.me/2013/05/27/1</id>
    <content type="html"><![CDATA[
<p>5/24付で前職の <a href="http://www.paperboy.co.jp/">paperboy&amp;co.</a> を退職して、今日から <a href="http://www.quipper.com/">Quipper</a> に join しました。</p>

<h3>paperboy&amp;co. について</h3>

<p>paperboy&amp;co. では4年弱お世話になったことになります。Technical Manager である <a href="http://github.com/mizzy">mizzy</a> さんを始めとして多くの人に本当に色々教えていただきました。
技術者の評価制度を Pull Request で行い、全社員がその評価結果を見ることのできる<a href="http://mizzy.org/blog/2012/02/29/1/">仕組み</a>や<a href="https://github.com/paperboy-all">全社員が GitHub を使ってやり取りをする</a>なんて、世界でもそうそうないんじゃないかと思います。
そういう自由でオープンさのある環境で働けたことは自分にとってとても幸せなことでした。ありがとうございました。</p>

<h3>Quipper について</h3>

<p>たまたまご縁があって、入社させて頂くことになりました。ロンドンに本社があって (30人くらい)、日本はまだ5~6人くらいで、その日本のほうで働くのですが、すごい忙しくなりそうですが、スピード感とビジョンがあってとても楽しみです。</p>

<p>paperboy&amp;co. で教えてもらったオープンネスとアウトプットをするという気持ちを忘れずにがんばっていきたいと思います。
今後ともどうぞよろしくお願いします。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[github.com から github.io に変わったのでドメインつけたりした]]></title>
    <link href="http://banyan.me/2013/05/26/1" />
    <updated>2013-05-26T19:30:18+09:00</updated>
    <id>http://banyan.me/2013/05/26/1</id>
    <content type="html"><![CDATA[
<p>github.com というドメインは変わることはない!! そう考えていたことがわたしにもありました。</p>

<p>ずっと banyan.github.com という GitHub Pages のドメインでやってたけど、
セキュリティ対策ということで banyan.github.io に変更になったので、せっかくなので、banyan.me というドメインをつけた。</p>

<p><blockquote class="twitter-tweet"><p>ブログ名に twitter アカウントいれておくとブクマされて URL 流れたとき mention 飛んできて便利</p>&mdash; Kensuke Nagae (@kyanny) <a href="https://twitter.com/kyanny/status/332446326312824832">May 9, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>という便利情報も見てタイトルも @banyan&#39;s blog に変更しました。</p>

<p>はてなスターもリセットされてしまったのか... うぅぅ、つらい</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[社内で Chef 勉強会をして色々教えてもらった]]></title>
    <link href="http://banyan.me/2013/03/21/1" />
    <updated>2013-03-21T01:33:53+09:00</updated>
    <id>http://banyan.me/2013/03/21/1</id>
    <content type="html"><![CDATA[
<p>自分の働いている会社は、ロリポップや heteml, Sqale などのホスティング事業をしてたり、また mizzy さんをはじめとして Puppet などを使ったプロビジョニングへの知識・経験がある人が多く、インフラエンジニアの人も多い。</p>

<p>開発側としては正直ものすごく楽なことが多々ある。けれどそうやって頼ってると、個人的な遊びとか開発に必要な簡単な VM とか以外ではなかなか Puppet や Chef を使ってという機会が少ないんで、まずは適当なネタをでっちあげて偉大なプロビジョニングマスターの人たちから少しずつ色々教えてもらおうと思いました。</p>

<p>ということでまず最初にやったのは rails-dev-box を chef で移植してみました。</p>

<ul>
<li><a href="https://github.com/banyan/chef-rails-dev-box">banyan/chef-rails-dev-box</a></li>
</ul>

<h3>rails-dev-box</h3>

<p>rails-dev-box は <a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html">Contributing to Ruby on Rails / edgeguides.rubyonrails.org</a> で紹介されている Puppet + Vagrant を使って Rails 自体の開発をするための環境を簡単に作るというプロジェクトです。</p>

<ul>
<li><a href="https://github.com/rails/rails-dev-box">rails/rails-dev-box</a></li>
</ul>

<p>rails-dev-box は本当に簡単に rails 環境を構築することができて、VirtualBox と Vagrant がインストールされていれば以下のコマンドをたたくだけです。</p>

<pre><code>host $ git clone https://github.com/rails/rails-dev-box.git
host $ cd rails-dev-box
host $ vagrant up

host $ vagrant ssh # で接続
Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic-pae i686)
...
vagrant@rails-dev-box:~$
</code></pre>

<p>port 3000 が port forward されているので host の localhost:3000 で vagrant の VM で rails がが起動していれば見ることができる</p>

<pre><code>host $ ls
README.md   Vagrantfile puppet
host $ git clone git://github.com/rails/rails.git # rails を clone

vagrant@rails-dev-box:~$ ls /vagrant # リモートの /vagrant 以下に mount される
puppet  rails  README.md  Vagrantfile
</code></pre>

<p>ローカルで開発して、テストは vagrant の VM 上で流す、というのが想定される使い方だと思う</p>

<h3>chef-rails-dev-box</h3>

<p>ここからは rails-dev-box と同じものを chef を使って構築していきます。
chef-solo に関しては<a href="http://d.hatena.ne.jp/naoya/20130313/1363129532">入門Chef Solo - Infrastructure as Code</a>がとても参考になりました。</p>

<p>だんだん書くのがめんどくさくなってきたので、以下コマンドにコメントつけるだけにします。</p>

<pre><code>host $ gem install knife-solo --pre # install 0.3.0 # knife-solo は 0.3.0 以上が 入門Chef Solo で勧められていたので従う
host $ gem install librarian # librarian は Chef の cookbooks を管理するための Ruby でいう bundler

# box の種類がたくさんあってどれがいいのか全然分からなかった、なるべくミニマムなのを選ぶのがいいとのことだけどどれがミニマムかも分からない
host $ vagrant box add ubuntu-1204 http://puppet-vagrant-boxes.puppetlabs.com/ubuntu-server-1204-x64.box
host $ vagrant list # 追加した box が表示されることを確認

host $ mkdir chef-rails-dev-box
host $ cd chef-rails-dev-box

host $ vagrant init ubuntu-1204 # これで Vagrantfile が作成される

host $ vagrant up
host $ vagrant ssh # で接続できる

host $ vagrant --help # 確認できる

host $ vagrant provision # chef を適用

host $ knife configure # 今回は chef サーバ使わないので全部エンターで
host $ knife solo init chef # rails-dev-box にしたがって chef のレシピを作るディレクトリを作成
</code></pre>

<p>以下のような階層のディレクトリが作られる。シンプルで分かりやすい。ちょっと前は <a href="https://github.com/opscode/chef-repo">https://github.com/opscode/chef-repo</a> を落としてきて、自分色に染めるというのがやり方だった気がするけど、その作法は忘れてよさそう。</p>

<pre><code>└── chef
    ├── cookbooks
    ├── data_bags
    ├── nodes
    ├── roles
    └── site-cookbooks
</code></pre>

<p>このレシピ専用の cookbook を作る時は -o site-cookbooks として指定する</p>

<pre><code>$ knife cookbook create hello -o site-cookbooks
</code></pre>

<h3>librarian と berkshelf</h3>

<p>cookbooks 管理で有名なものは librarian と berkshelf があるようです。(その他もあるかも)</p>

<ul>
<li><p>librarian</p>

<ul>
<li>like bundler</li>
<li><a href="https://github.com/applicationsonline/librarian">https://github.com/applicationsonline/librarian</a></li>
</ul></li>
<li><p>berkshelf</p>

<ul>
<li><a href="https://github.com/RiotGames/berkshelf">https://github.com/RiotGames/berkshelf</a></li>
<li>なおやさんの chef-solo 本だとこっちを使ってた</li>
</ul></li>
<li><p><a href="http://christian-trabold.de/librarian-chef-vs-berkshelf">http://christian-trabold.de/librarian-chef-vs-berkshelf</a></p>

<ul>
<li>ほとんど機能は同じらしいけど、違いはハードリンクするのが berkshelf</li>
</ul></li>
</ul>

<p>とりあえず librarian を使ってみた</p>

<pre><code>$ librarian-chef init # で Cheffile ができる
$ vi Cheffile
$ librarian-chef install # で bundle install のようにインストールできる
</code></pre>

<p>ここで自分は cookbooks 以下にインストールされる外部の cookbooks までバージョン管理に含めてたけど、当然 bundler のように .gitignore で無視すべきだ、ということをあんちぽさんに指摘してもらった。</p>

<h3>rails-dev-box で box の中でやっていることは以下の内容になる</h3>

<ul>
<li>Git</li>
<li>RVM</li>
<li>Ruby 1.9.3 (binary RVM install)</li>
<li>Bundler</li>
<li>SQLite3, MySQL, and Postgres</li>
<li>System dependencies for nokogiri, sqlite3, mysql, mysql2, and pg</li>
<li>Databases and users needed to run the Active Record test suite</li>
<li>Node.js for the asset pipeline</li>
<li>Memcached</li>
</ul>

<p>chef-rails-dev-box では rvm と Ruby 1.9.3 (binary RVM install) をやめて以下を使うことにする</p>

<ul>
<li>rbenv</li>
<li>Ruby 2.0.0-p0 (via ruby-build)</li>
</ul>

<p>余談だけど以前 hsbt さんが rails-dev-box に<a href="http://www.hsbt.org/diary/20130112.html">rbenv のパッチをおくっている</a>けど reject されている。
理由は rbenv がバイナリ経由でインストールすることができないから。@fxn さん (rails-dev-box の owner) は簡単にインストールできることを重視している。
(ただこれ rbenv と ruby-build だけをいれてるだけで Puppet が走るときに別に ruby-build するわけでもないから時間もかからないし、すごい殊勝な PR でマージしてもいいと個人的には思う...)</p>

<h3>色々と話したり教えてもらったこと</h3>

<ul>
<li>cookbook fork とかされてる奴とかあるけどどれが正しいのか全く分からない。基本は OpsCode を使う感じにした。カオス感ある</li>
<li>apt-get -y upgrade すると文字化けして死ぬ、なぜ?

<ul>
<li>OS が問題なのでは? なるべくミニマムな奴使いましょう</li>
</ul></li>
<li>database は <a href="http://community.opscode.com/cookbooks/database">http://community.opscode.com/cookbooks/database</a>

<ul>
<li>MySQL, PostgreSQL, SQL Server などの DB 作成や User 作成が抽象化されている</li>
<li>Puppet だとそこまで抽象化したものはないよ</li>
</ul></li>
<li> <a href="https://github.com/rails/rails-dev-box/issues/21">@fxn さんに質問もしたんすけど</a> rails-dev-box 使うとテスト遅いんですけど...

<ul>
<li>NFS + vagrant でぐぐれ! vagrant の FAQ ですよ!!1</li>
<li>実際に rails-dev-box で試したら3時間かかってたのが1時間くらいになって 300% パフォーマンス改善された</li>
<li>chef-rails-dev-box では NFS をデフォルト使うようにしてみる</li>
</ul></li>
<li>パッケージのインストールは<a href="https://github.com/banyan/chef-rails-dev-box/commit/f3d829115e28b60109e47f55f1fe45f73811229e">こんな風に書きました</a>

<ul>
<li>レシピに書くのはダメ。必ず attributes を使うことで nodes などでも override していく正しいレシピを書くことができる</li>
<li><a href="https://github.com/banyan/chef-rails-dev-box/commit/0285bc1ff52a3b336678d80d74d12d7594e129f2">リファクタした</a></li>
</ul></li>
<li><a href="https://github.com/banyan/chef-rails-dev-box/commit/90e4491f49e7802bc52902118e3a065416238bb9">pre と post みたいにして</a> 順序の依存を書いてるんですけどどうなんでしょうか？

<ul>
<li><a href="https://github.com/banyan/chef-rails-dev-box/commit/90e4491f49e7802bc52902118e3a065416238bb9">こういう箇所</a> は bash (script) リソース使わずに direcory リソースを使うべきです!!</li>
<li>そうすれば順序に依存した書き方を減らすことができます</li>
<li>なるほどーと思ってやってみたけど direcory リソースではうまくいかなかった...</li>
</ul></li>
<li>chef はディレクトリ構造がしっかりしている。puppet は syntax が固いが、ディレクトリ構造はゆるい。Puppet はベストプラクティスはあるけれど、そういうのを学ばないとベチャッとしたレシピ (manifest) になりがち。Puppet と Chef どっちもどっちだけど自分なら Puppet を選ぶかな(by あんちぽさん)

<ul>
<li>あんちぽさんもはや Puppet と Chef の哲人みたいな感じになってきてる...</li>
</ul></li>
<li>Puppet は librarian みたいなの使われてますか?

<ul>
<li>まだ現場じゃそんなにつかわれてないんじゃないかな？ <a href="https://github.com/rodjek/librarian-puppet">librarian-puppet</a> というのもあるよ</li>
</ul></li>
<li>今回のような開発環境としてだけ使いたいケースだと Vagrantfile に attributes を書いて vagrant provision で実行してもいいけど、通常はどこかにデプロイするわけで、そういう時は knife-solo で chef を適用するようにすることでインターフェースを共通にして適用できる

<ul>
<li><a href="https://github.com/CPAN-API/prepan-cookbooks">CPAN-API/prepan-cookbooks</a> が参考になる</li>
</ul></li>
</ul>

<h3>WIP of chef-rails-dev-box</h3>

<ul>
<li>ひと通り動くけど、bundle exec rake test とした時に止まってしまうテストがあるなー</li>
<li>インストールに時間かかるけれど、chef-rails-dev-box は rails-dev-box とは違うポリシーで動くようにしていけたらと思います</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[randomize rspec example order]]></title>
    <link href="http://banyan.me/2012/11/21/1" />
    <updated>2012-11-21T01:05:27+09:00</updated>
    <id>http://banyan.me/2012/11/21/1</id>
    <content type="html"><![CDATA[
<p><a href="http://blog.davidchelimsky.net/2012/07/07/rspec-211-is-released/">rspec-rails-2.11.0</a> (July 7th, 2012) 以降</p>

<pre><code>$ rails generate rspec:install
</code></pre>

<p>rails の generator を使って生成する spec_helper.rb には</p>

<pre><code>config.order = &quot;random&quot;
</code></pre>

<p>という一行が追加されるようになっている。このことで examples のテストの順番がデフォルトでランダムになる。</p>

<p><a href="https://github.com/rspec/rspec-core/issues/403">Feature idea: allow examples to be run in random order (like minitest)</a> を見ると、元々は minitest で実装されていたアイディアで、rspec-core 本体では 2.8.0 rc releases の時 (November 6th, 2011) にはすでにリリースされている。(結構前からあるんですね...)</p>

<p>このランダムというのはファイル単位ではなくて example 単位で random になる。そうなることで起こる問題が</p>

<ol>
<li>The documentation and html formatters がランダムにテストが走ると機能しない</li>
<li>before(:all) or after(:all) の hook の関係性</li>
</ol>

<p>を議論している。後者の before(:all) や after(:all) の問題はランダム化する時の実装で含めるようにすれば問題はない、ということになってて、前者のほうは互換性がないときは STDERR にメッセージを送ればいいんじゃないかとか、formatter の whitelist でなんとかなるみたいなことを詳細はちょっとよく分からない。</p>

<p>テストを実行した後に、</p>

<pre><code>Randomized with seed 37840
</code></pre>

<p>という seed が出力されるので、もし random order を再現させたい場合は</p>

<pre><code>$ bundle exec rspec --order rand:37840
</code></pre>

<p>などとして順序を再現することが可能になる。</p>

<p>テストを書いてて、example の間に依存性ができていて、その spec だけを走らせると、テストが通るけど、全体を通すとこける、みたいなことは割とあるし、Travis CI でだけ落ちるとか頭の痛くなる問題なので、
このオプションをつけるようにしてちょっと運用してみよう。
でも適当にライブラリ選んでテスト order = &quot;random&quot; で走らせるとテスト落ちまくるんだけど、なかなか途中からいれると最初大変そうな気もするな...</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[living as a gem ソムリエ]]></title>
    <link href="http://banyan.me/2012/11/18/2" />
    <updated>2012-11-18T22:23:56+09:00</updated>
    <id>http://banyan.me/2012/11/18/2</id>
    <content type="html"><![CDATA[
<p>gem ソムリエとは何だろうか? <a href="http://github.com/kyanny">@kyanny</a> 氏の書いた <a href="http://d.hatena.ne.jp/a666666/20110331/1301499299">gem ソムリエになる方法</a> が日本で最も gem ソムリエについて言及した記事だ (というかこれしかない)。
Ruby / Rails で開発をしている人なら誰でも大なり小なり gem ソムリエなのだと思う。</p>

<p>Rails のコミュニティ (エコシステム) は毎日のように新しい gem が出てくる。(もちろん他の言語 / コミュニティもそうだとは思うけど)
フィードを追っかけ、ぱぱっと GitHub のソースを見たりして、吟味し、息もつく暇もなくまた新しい gem が出てくる。</p>

<h3>一番人気、デファクトスタンダードの重要性</h3>

<p>これは gem に限ったわけではないけど、色々なことにおいて一番人気のものにのっかることはとても大切なことだと思う。
なぜなら使う人が多ければ多いほど、便利なものが増え、同じ問題に困っている人が多く、その解決方法も生まれてくるからだ。</p>

<p>かつて僕は sleipnil というブラウザが大好きで、firefox に移行することに躊躇してた。
当時はグリモン全盛期の頃で、横目で見ながらも、sleipnil だって同じことができるはずだ... と色々頑張ったりしてたけど、
ある日移行してみて愕然とした。そのグリモンの量や、アドオンの量に... (そりゃグリモンなのに IE 対応とか考えたくもない)</p>

<p>その時以来、オワコンになるものを見極めつつも、人気のある言語であったり OS であったり、ライブラリであったり、ミドルウェアであったりそういうものを使うのが正しいことだ、というのが僕の考えです。</p>

<h3>一度導入すると変更が難しい gem</h3>

<p>ここまで言っておきながら、僕は元来メジャーとマイナーのものだとマイナーのほうが好きな傾向がある。
もちろん趣味の話なら好きなものはなんだって構わないけど、でも仕事で使うものは基本的に先に述べたような理由から一番人気のあるものを使ったほうがいいと思う。</p>

<p>仕事で使うものにも、ちょっとした遊びみたいな小さな gem から、全体に影響を与える大きな gem がある。
例えばテストフレームワークとか、認証用のライブラリだとかだ。</p>

<p>例えば fixture replacement としての Factory Girl と Fabrication がある。
前者は thoughtbot がメンテをして今一番人気があるものだ。Fabrication は後発で Factory Girl とほぼ同じなんだけど、syntax がちょっとキレイな感じがする。</p>

<p>ruby-toolbox.com で今調べてみると、Factory Girl が Total Downloads 2642751 に対して、Fabrication が Total Downloads 149592 だ。(単純に Download 数で比較できないけど約17倍の差!!!)</p>

<p>僕は今同僚である @kyanny 氏と仕事をさせて頂いていて、ただ毎回選ぶ時には @kyanny 氏はとても優しい人なので「どちらでも @banyan さんの好きなほうで僕は構いませんよ」と言ってくれて、つい Fabrication を選んでしまった。</p>

<p>認証ライブラリも Devise ではなく Sorcery を選んだ。</p>

<blockquote>
<p>その時以来、オワコンになるものを見極めつつも、人気のある言語であったり OS であったり、ライブラリであったり、ミドルウェアであったりそういうものを使うのが正しいことだ、というのが僕の考えです。</p>
</blockquote>

<p>あれ...
<br />
<br />
<br /></p>

<p><img src="/images/marude.png" alt="まるで成長していない..."></p>

<p><br /></p>

<h3>後発の gem の抗い難い魅力</h3>

<p>とは言え、後出しで作られる gem には基本的に今一番メジャーなものへのカウンターというか、魅力がある。
例えば Devise はそれこそほぼ全ての認証のことができてしまうが大きい。Sorcery の魅力は小ささだ。</p>

<p>また後発ならではの良さは小さいが故にバグも多かったり、また必要な機能も足りてなかったりして色々 Pull Request を送ったりすることもできる。</p>

<p>何か問題が起こったわけではないし、結局のところ後発のものを採用するからには、何かあったら、選んだ自分に問題になるから、まぁなんとしてでも直して使うぞという気概を持って毎回選択している。</p>

<h3>それでも一番人気になるべく寄せたほうがいい</h3>

<blockquote>
<p>何かあったら、選んだ自分に問題になるから、まぁなんとしてでも直して使うぞという気概を持って毎回選択している。</p>
</blockquote>

<p>ひとつ思うのは、確かに自分が関わっている限りこの考え方なら問題はでないかもしれない。でも自分がそのプロジェクトに関わらなくなることは当然あるわけで、
またその時引き継ぐ人が gem ソムリエかもしくは gem ソムリエになるやる気がある人ならいいけど、あんまり興味ないし適当にやりますー、みたいな感じの人だと
こんなに色々使ってると bump version した時とかうまく upgrade できなくて、そうしたらやはり問題になるわけで、そういう意味でもやっぱその時の一番人気 (終わりかけになってない感じ)
を見極めて寄せるのはやっぱり改めて大切なことなのかなーと思った。まぁでもみんな1年先くらいまでしか分かんない気もするけども &gt;&lt;</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[pry の wtf のメモ]]></title>
    <link href="http://banyan.me/2012/11/18/1" />
    <updated>2012-11-18T15:06:52+09:00</updated>
    <id>http://banyan.me/2012/11/18/1</id>
    <content type="html"><![CDATA[
<p>pry で例外の backtrace を見るにはどうすればいいのか。</p>

<pre><code>Loading development environment (Rails 4.0.0.beta)
[1] pry(main)&gt; Fabricate(:user)
ArgumentError: wrong number of arguments (2 for 0..1)
from /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/activerecord/lib/active_record/core.rb:158:in `initialize&#39;
</code></pre>

<p>例えばこんなエラーが出た時に、0 か 1 しか受け付けないメソッドに2つ渡しているために ArgumentError が出ているのは分かるが、
こっちからどう渡しているのかを知りたい時は、<code>_ex_</code> という変数を参照すればよい。</p>

<pre><code>[2] pry(main)&gt; _ex_.message
=&gt; &quot;wrong number of arguments (2 for 0..1)&quot;

[3] pry(main)&gt; _ex_.backtrace
=&gt; [&quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/activerecord/lib/active_record/core.rb:158:in `initialize&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/active_record.rb:8:in `new&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/active_record.rb:8:in `build_instance&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/base.rb:13:in `build&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/base.rb:26:in `create&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/schematic/definition.rb:62:in `block in fabricate&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/schematic/definition.rb:61:in `instance_eval&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/schematic/definition.rb:61:in `fabricate&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/fabricator.rb:8:in `fabricate&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication.rb:52:in `Fabricate&#39;&quot;,
 &quot;(pry):1:in `__pry__&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:275:in `eval&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:275:in `re&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:251:in `rep&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:231:in `block (3 levels) in repl&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:232:in `loop&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:232:in `block (2 levels) in repl&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:229:in `catch&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:229:in `block in repl&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:228:in `catch&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:228:in `repl&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_class.rb:154:in `start&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/railties/lib/rails/commands/console.rb:78:in `start&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/railties/lib/rails/commands/console.rb:9:in `start&#39;&quot;,
 &quot;/Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/railties/lib/rails/commands.rb:71:in `&lt;top (required)&gt;&#39;&quot;,
 &quot;script/rails:6:in `require&#39;&quot;,
 &quot;script/rails:6:in `&lt;main&gt;&#39;&quot;]
</code></pre>

<p>とは言いながらも <em>ex</em> って覚えにくいので、wtf というコマンドが用意されている。</p>

<p>ん？と思ったら wtf</p>

<pre><code>[4] pry(main)&gt; wtf
Exception: ArgumentError: wrong number of arguments (2 for 0..1)
--
0: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/activerecord/lib/active_record/core.rb:158:in `initialize&#39;
1: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/active_record.rb:8:in `new&#39;
2: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/active_record.rb:8:in `build_instance&#39;
3: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/base.rb:13:in `build&#39;
4: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/base.rb:26:in `create&#39;
</code></pre>

<p>んんん？？と思ったら wtf?</p>

<pre><code>[5] pry(main)&gt; wtf?
Exception: ArgumentError: wrong number of arguments (2 for 0..1)
--
0: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/activerecord/lib/active_record/core.rb:158:in `initialize&#39;
1: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/active_record.rb:8:in `new&#39;
2: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/active_record.rb:8:in `build_instance&#39;
3: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/base.rb:13:in `build&#39;
4: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/base.rb:26:in `create&#39;
5: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/schematic/definition.rb:62:in `block in fabricate&#39;
6: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/schematic/definition.rb:61:in `instance_eval&#39;
7: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/schematic/definition.rb:61:in `fabricate&#39;
8: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/fabricator.rb:8:in `fabricate&#39;
9: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication.rb:52:in `Fabricate&#39;
</code></pre>

<p>ちっ！！！！なんなんだよ、くそがっ！！！！と思ったら <code>wtf????!?!!?!??!</code></p>

<pre><code>[7] pry(main)&gt; wtf?!???!!!
Exception: ArgumentError: wrong number of arguments (2 for 0..1)
--
 0: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/activerecord/lib/active_record/core.rb:158:in `initialize&#39;
 1: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/active_record.rb:8:in `new&#39;
 2: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/active_record.rb:8:in `build_instance&#39;
 3: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/base.rb:13:in `build&#39;
 4: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/base.rb:26:in `create&#39;
 5: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/schematic/definition.rb:62:in `block in fabricate&#39;
 6: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/schematic/definition.rb:61:in `instance_eval&#39;
 7: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/schematic/definition.rb:61:in `fabricate&#39;
 8: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/fabricator.rb:8:in `fabricate&#39;
 9: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication.rb:52:in `Fabricate&#39;
10: (pry):1:in `__pry__&#39;
11: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:275:in `eval&#39;
12: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:275:in `re&#39;
13: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:251:in `rep&#39;
14: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:231:in `block (3 levels) in repl&#39;
15: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:232:in `loop&#39;
16: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:232:in `block (2 levels) in repl&#39;
17: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:229:in `catch&#39;
18: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:229:in `block in repl&#39;
19: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:228:in `catch&#39;
20: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_instance.rb:228:in `repl&#39;
21: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/pry-0.9.10/lib/pry/pry_class.rb:154:in `start&#39;
22: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/railties/lib/rails/commands/console.rb:78:in `start&#39;
23: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/railties/lib/rails/commands/console.rb:9:in `start&#39;
24: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/railties/lib/rails/commands.rb:71:in `&lt;top (required)&gt;&#39;
25: script/rails:6:in `require&#39;
26: script/rails:6:in `&lt;main&gt;&#39;
</code></pre>

<p>やってることは <em>ex</em> と同じなんだけど感情と同期するメソッド名みたいなの初めて見た。面白い。
pry すごい便利だけど、コマンド覚えにくい。でも wtf だけ他のコマンドと比べて覚えやすすぎる。こういうこと重要な気がする。</p>

<pre><code>[8] pry(main)&gt; cat --ex
Exception: ArgumentError: wrong number of arguments (2 for 0..1)
--
From: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/bundler/gems/rails-6c5bd10dc498/activerecord/lib/active_record/core.rb @ line 158 @ level: 0 of backtrace (of 26).

    153:     # hence you can&#39;t have attributes that aren&#39;t part of the table columns.
    154:     #
    155:     # ==== Example:
    156:     #   # Instantiates a single new object
    157:     #   User.new(first_name: &#39;Jamie&#39;)
 =&gt; 158:     def initialize(attributes = nil)
    159:       defaults = self.class.column_defaults.dup
    160:       defaults.each { |k, v| defaults[k] = v.dup if v.duplicable? }
    161:
    162:       @attributes   = self.class.initialize_attributes(defaults)
    163:       @columns_hash = self.class.column_types.dup
[9] pry(main)&gt; cat --ex 1
Exception: ArgumentError: wrong number of arguments (2 for 0..1)
--
From: /Users/banyan/ror/licm/.bundle/gems/ruby/2.0.0/gems/fabrication-2.5.0/lib/fabrication/generator/active_record.rb @ line 8 @ level: 1 of backtrace (of 26).

     3:   def self.supports?(klass)
     4:     defined?(ActiveRecord) &amp;&amp; klass.ancestors.include?(ActiveRecord::Base)
     5:   end
     6:
     7:   def build_instance
 =&gt;  8:     self.__instance = __klass.new(__attributes, without_protection: true)
     9:   end
    10:
    11: end
</code></pre>

<p><code>cat --ex n</code> で実際のコンテキストのコードを見れる。</p>

<p>なお↑の話は<a href="https://github.com/pry/pry/wiki/Exceptions">pry/wiki/Exceptions</a> に全て書いてあります。</p>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[capybara + poltergeist か capybara + capybara-webkit でテストが通らない問題にぶつかった]]></title>
    <link href="http://banyan.me/2012/10/24/2" />
    <updated>2012-10-24T02:16:41+09:00</updated>
    <id>http://banyan.me/2012/10/24/2</id>
    <content type="html"><![CDATA[
<h3>はじめに</h3>

<p>この情報は 2012-10-24 のものです。これ以降ではこの回避方法より正式に upgrade するだけで問題が解決する可能性がありますのでご確認ください。
現状日本語の情報がなかったので書きました。また正式な対応があり次第 update する予定です。何かありましたら <a href="http://twitter.com/banyan">@banyan</a> まで教えて頂けるとありがたいです。</p>

<h3>現象</h3>

<h4><a href="https://github.com/jonleighton/poltergeist">poltergeist</a> を使っている場合</h4>

<ul>
<li>js =&gt; true にしていると1つ目のテストは通るが js =&gt; true にしている2つ目のテストは落ちる</li>
<li>正確にいうと奇数のテストは通るが、偶数のテストは落ちる</li>
<li>エラー内容は以下のような感じ</li>
</ul>

<p><code>
Failure/Error: visit &quot;/&quot;
    Capybara::Poltergeist::DeadClient:
    The PhantomJS client died while processing {&quot;name&quot;:&quot;visit&quot;,&quot;args&quot;:[&quot;http://127.0.0.1:63091/&quot;]}
{&quot;name&quot;=&gt;&quot;visit&quot;, &quot;args&quot;=&gt;[&quot;http://127.0.0.1:63091/&quot;]}
PhantomJS has crashed. Please read the crash reporting guide at https://code.google.com/p/phantomjs/wiki/CrashReporting and file a bug report at https://code.google.com/p
</code></p>

<ul>
<li>capybara (1.1.2)</li>
<li>poltergeist (1.0.1)</li>
</ul>

<h4><a href="https://github.com/thoughtbot/capybara-webkit">capybara-webkit</a> を使っている場合</h4>

<ul>
<li>js =&gt; true のテストがはじめに Capybara::Driver::Webkit::WebkitNoResponseError がでてそれ以降のテスト全て Errno::EPIPE: Broken pipe が出て死ぬ</li>
</ul>

<p><code>Capybara::Driver::Webkit::WebkitNoResponseError:
No response received from the server.
</code></p>

<ul>
<li>capybara (1.1.2)</li>
<li>capybara-webkit (0.12.1)</li>
</ul>

<h4>issue とか調べていくと、font-awesome を使っている人が起こっている...（ ﾟдﾟ）</h4>

<ul>
<li><a href="https://github.com/thoughtbot/capybara-webkit/issues/68">https://github.com/thoughtbot/capybara-webkit/issues/68</a></li>
<li><a href="https://github.com/thoughtbot/capybara-webkit/issues/181">https://github.com/thoughtbot/capybara-webkit/issues/181</a></li>
<li><a href="https://github.com/jonleighton/poltergeist/issues/44">https://github.com/jonleighton/poltergeist/issues/44</a></li>
<li>Mac の font が原因? まだ正式に答えは出てなさそう。</li>
</ul>

<h4>テストの時は font-awesome を使わないようにする方法でとりあえず回避した</h4>

<ul>
<li><a href="https://github.com/thoughtbot/capybara-webkit/issues/181#issuecomment-6809202">https://github.com/thoughtbot/capybara-webkit/issues/181#issuecomment-6809202</a></li>
</ul>

<h4>所感</h4>

<ul>
<li>そもそも JS の example が少なかったし導入のタイミングだったので切り分けで時間がかかった。

<ul>
<li>元々通ってたのが gem の update をして気づいたのならすぐ気づけたと思った。</li>
</ul></li>
<li>poltergeist(phantomjs) 諦めて capybara-webkit でも同じように死んだので気づけました。</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[「プログラマのための文字コード技術入門」を読んだ]]></title>
    <link href="http://banyan.me/2012/10/24/1" />
    <updated>2012-10-24T01:43:42+09:00</updated>
    <id>http://banyan.me/2012/10/24/1</id>
    <content type="html"><![CDATA[
<p>もう2年前に出版された本だけどずっと気になってたので買って読んでみた。すばらしく良書でかつ面白かった。文字コードの大きな流れが見えて理解しやすかった。</p>

<p>長年ちゃんと理解してなかったことが書いてあったりすると喜びは格別なのだけど、
もっと早く知っておけばよかったとも、やきもきしながら読んでた。</p>

<p>全部理解できてるわけではないし、そして正直読んだ端から頭から抜けていくので以下気になったところの一部をメモしておく。</p>

<h3>第1章 文字とコンピュータ</h3>

<ul>
<li>事物を符号で表現することを「符号化」と呼ぶ</li>
<li>文字とそれに対応するビット組み合わせを対応付ける規則を「文字コード」と呼ぶ</li>
<li>文字コードを初期に設計した人は世界中の文字を符号化することは考えずに自国の自分たちの用に足るだけの文字を扱うことを考えた</li>
<li>文字を重複なく集めたものを「文字集合」と呼ぶ

<ul>
<li>ラテンアルファベットの大文字・小文字</li>
<li>常用漢字の1945文字</li>
</ul></li>
<li>文字コードを決める際には、文字集合を定めることが必須</li>
<li>文字集合を定義し、その集合の各文字に対応するビット組み合わせを「文字コード」もしくは「符号化文字集合」(coded character set) と呼ぶ

<ul>
<li>実用的な符号化文字集合の例 - ISO/IEC 646 国際基準 (ASCII と同様)</li>
</ul></li>
<li>文字表の中の位置のことを「符号位置」(code position) と呼ぶ</li>
<li>文字は一意に符号化されることが文字コードの原則</li>
<li>文字コードが複雑になる2つの理由

<ul>
<li>過去の資産との互換性や連続性を考慮する必要がある</li>
<li>文字そのものの難しさ</li>
</ul></li>
</ul>

<h3>第2章 文字コードの変遷</h3>

<ul>
<li>最も基本的な文字コード

<ul>
<li>1960 年代にアメリカの規格として開発された <a href="http://ja.wikipedia.org/wiki/ASCII">ASCII</a> (American Standard Code for Information Interchange)</li>
<li>7ビットの1バイトコード</li>
<li>全部で128の符号位置</li>
<li>0x00 から 0x1F までの位置は制御文字に割り当てる</li>
<li>ASCII はアメリカで開発されたので通貨記号として＄ (ドル記号) を含む</li>
</ul></li>
<li>ASCII の各国用の変種

<ul>
<li>各国語版の ISO/IEC 646 が作られることになる</li>
<li>日本版の ISO/IEC 646 -&gt; 日本工業規格の <a href="http://ja.wikipedia.org/wiki/JIS_X_0201">JIS X 0201</a> として標準化</li>
<li>符号位置 0x5C: ASCII では \ (バックスラッシュ) なのが ￥ (通貨の円記号に)</li>
<li>符号位置 0x7E: ASCII では ~ (チルダ) なのが、¯ (オーバーライン)に</li>
<li>ISO/IEC 646 には国際基準版 (International Reference Version) というどこの国でもないバージョンができたが、現在では ASCII と同じものになっている</li>
<li>ISO/IEC 646 の問題 -&gt; 複数の言語を混在化させることができなかった</li>
</ul></li>
<li>文字コードを拡張するための枠組みとして <a href="http://ja.wikipedia.org/wiki/ISO/IEC_2022">ISO/IEC 2022</a> が登場

<ul>
<li>8ビットコード (第8ビットも用いる文字コード) や2バイトコード (2つのバイトで1文字を表す文字コード) が可能</li>
<li>複数の符号化文字集合を組み合わせて用いることができるように</li>
<li>CL/GL, CR/GR</li>
<li>文字集合の切り替えのためにエスケープシーケンスを利用する</li>
<li>ISO/IEC 2022 = エスケープシーケンスではない。(EUC-JP はエスケープシーケンスを使ってない）</li>
</ul></li>
<li>ISO/IEC 2022 に則った2バイト符号化文字集合 -&gt; 1978年に制定された日本の JIS X 0208

<ul>
<li>94 * 94 = 8836 の符号位置がある</li>
<li>ちなみに常用漢字が 1945 文字</li>
<li>漢字だけでなく、平仮名、片仮名、ラテン文字、ギリシャ文字、キリル文字など様々な文字を含む</li>
<li>1バイトコードに2バイトコードを組み合わせたい</li>
<li>JIS X 0208 を ASCII や JIS X 0201 といった1バイトコードと組み合わせて運用する方法が普及 -&gt; Shift_JIS や EUC-JP、ISO-2022-JP はそうした符号化方式</li>
</ul></li>
<li>ヨーロッパでは8ビットの1バイトコードが広く使用され代表格が ISO/IEC 8859-1。通称 Latin-1</li>
<li>国際符号化文字集合

<ul>
<li>世界中の文字をひとつの表に収める</li>
<li>ISO/IEC 10646 と Unicode の誕生</li>
<li>ISO/IEC 10646 と Unicode は別個の規格でありながら、どちらかに文字が追加されればまた一方にも追加され、互いに同一の文字表として改訂されている</li>
</ul></li>
</ul>

<h3>第3章 代表的な符号化文字集合</h3>

<ul>
<li>ASCII と ISO/IEC 646

<ul>
<li>最も基本的な1バイト文字集合</li>
</ul></li>
<li>JIS X 0201

<ul>
<li>ラテン文字と片仮名の1バイト文字集合</li>
</ul></li>
<li>JIS X 0208

<ul>
<li>日本の最も基本的な2バイト文字集合</li>
<li>97 JIS 包摂基準。この概念はとても重要。</li>
</ul></li>
<li>JIS X 0212

<ul>
<li>補助漢字。あまり使われてない。</li>
</ul></li>
<li>JIS X 0213

<ul>
<li>第3、第4水準漢字への拡張</li>
<li>アイヌ語表記用片仮名</li>
<li>賈詡 (かく)、荀彧 (じゅんいく)、龐統 (ほうとう)、許褚 (きょちょ) といった三国志の登場人物は第3、第4水準漢字</li>
</ul></li>
<li>ISO/IEC 8859 シリーズ

<ul>
<li>欧米で広く使われる1バイト符号化文字集合</li>
</ul></li>
<li>Unicode と ISO/IEC 10646

<ul>
<li>国際符号化文字集合</li>
<li>Universal Multiple Octet Coded Character Set (UCS) = ISO/IEC 10646 = Unicode</li>
<li>基本多言語面 (BMP)</li>
<li>Unicode は整数値で表される符号位置と文字とを対応付ける</li>
<li>その整数である符号位置をバイト列の形で表現するための方式として UTF-8 や UTF-16, UTF-32 といった各種の符号化方式が定められている</li>
</ul></li>
</ul>

<h3>第4章 代表的な文字符号化方式</h3>

<ul>
<li>後で書く</li>
</ul>

<h3>第5章 文字コードの変換と判別</h3>

<ul>
<li>後で書(ry</li>
</ul>

<h3>第6章 インターネットと文字コード</h3>

<ul>
<li>後で(ry</li>
</ul>

<h3>第7章 プログラミング言語と文字コード</h3>

<ul>
<li>Java, Ruby1.8, Ruby1.9 の文字コードの取り扱いを紹介。</li>
</ul>

<h3>第8章 はまりやすい落とし穴とその対処</h3>

<ul>
<li>後(ry</li>
</ul>

<h3>Appendix</h3>

<ul>
<li>北朝鮮で1990年代に作られた文字コード KPS 9566 では、「金日成」「金正日」という人名表記に相当するハングル6文字がこの順番に通常のハングルと独立した区点位置にあって、人名でソートした際必ず最初に現れるらしい。面白い。

<ul>
<li><a href="http://www.itscj.ipsj.or.jp/ISO-IR/202.pdf">http://www.itscj.ipsj.or.jp/ISO-IR/202.pdf</a> どれがそれに該当するのかよく分からない。</li>
</ul></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[I18n.backend.store_translations のメモ]]></title>
    <link href="http://banyan.me/2012/08/01/1" />
    <updated>2012-08-01T01:15:08+09:00</updated>
    <id>http://banyan.me/2012/08/01/1</id>
    <content type="html"><![CDATA[
<p>今日社内の Crafting Rails Applications 読書会でこういうコードがでてきた。</p>

<pre><code>test &quot;model_name.human uses I18n&quot; do
  begin
    I18n.backend.store_translations :en,
      :activemodel =&gt; { :models =&gt; { :sample_mail =&gt; &quot;My Sample Mail&quot; } }

    assert_equal &quot;My Sample Mail&quot;, model.class.model_name.human
  ensure
    I18n.reload!
  end
end
</code></pre>

<p>I18n.backend.store_translations を使うことで I18n のテストをしたい時にいちいち fixture とか yaml とかで I18n の文言を用意しなくてもテストができるらしい。
アプリケーションではなくライブラリなどで I18n のテストを書くときはこの方法がよさそうです。
begin...ensure で囲んであるのはこのテストが終わったときに、reload して格納したデータをリセットするためとのこと。</p>

<p>で今 <a href="https://github.com/brainspec/enumerize">Enumerize</a> のコード見てたら I18n.backend.store_translations のラッパーを用意していて便利げだった。
テスト書いてて、begin...ensure でごちゃごちゃする時はこういう風に書いたりして
block で渡したりするとキレイになって他でも使えそう。</p>

<pre><code>module MiscHelpers
  def store_translations(locale, translations, &amp;block)
    begin
      I18n.backend.store_translations locale, translations
      yield
    ensure
      I18n.reload!
    end
  end
end

class MiniTest::Spec
  include MiscHelpers
end

it &#39;returns nil as translation when value is nil&#39; do
  store_translations(:en, :enumerize =&gt; {:foo =&gt; {:a =&gt; &#39;a text&#39;}}) do
    klass.enumerize(:foo, :in =&gt; [:a, :b])
    object.foo_text.must_equal nil
  end
end
</code></pre>

]]></content>
  </entry>


</feed>
